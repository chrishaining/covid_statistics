# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
#fig <- fig %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
fig
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~date, type = 'scatter')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
#fig <- fig %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
fig
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~date, type = 'scatter')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
fig2 <- compared_infections_and_deaths_dates %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~date, type = 'scatter')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
fig2 <- fig %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
fig2
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~date, type = 'scatter', mode='markers')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
fig2 <- fig %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
fig2
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~date, type = 'scatter', mode='markers')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
fig2 <- fig %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
fig2
library(ggplot2)
library(scales)
infectionsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=date)) + geom_line(aes(y=estimated_infections_no_action), col = "steelblue") + geom_line(aes(y=estimated_infections_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-13"), y = 50000000, label="No action")) + geom_text(x=as.Date("2020-04-13"), y = 5000000, label="Lockdown") + labs(title="Predicted infections (lockdown versus no action)", x='Date', y='Predicted Infections') + theme_classic()
infectionsComparisonLine
deathsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=death_date_7_days)) + geom_line(aes(y=estimated_deaths_no_action), col = "steelblue") + geom_line(aes(y=estimated_deaths_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-21"), y = 500000, label="No action")) + geom_text(x=as.Date("2020-04-21"), y = 50000, label="Lockdown") + labs(title="Predicted Deaths (lockdown versus no action)", subtitle="estimates that it takes 3 weeks for measures to impact deaths", x='Date', y='Predicted Deaths') + theme_classic()
deathsComparisonLine
library(readr)
library(dplyr)
figures <- read.csv('uk_daily_tests.csv')
figures
figures <- figures %>% mutate(`Total Tests`=`Pillar.1.Tests` + `Pillar.2.Tests` + `Pillar.4.Tests`)
figures
p1People <- 9393/2
p1People
p1Tests <- 12081/2
p1Tests
p2People <- 2486/2
p2People
p2Tests <- 2486/2
p4Tests <- 415/2
p4Tests
library(ggplot2)
library(ggthemes)
library(plotly)
totalTestBar <- ggplot(figures, aes(x=Date, y=`Total Tests`)) + geom_bar(stat='identity', fill='#87189D') + ggtitle('Number of Tests Conducted per Day (all Pillars)') + theme_clean()
totalTestBar
# make the plot interactive using plotly
ggplotly(totalTestBar)
lm([target variable] ~ [predictor variables], data = [data source])
library(ggplot2)
library(ggthemes)
library(plotly)
totalTestBar <- ggplot(figures, aes(x=Date, y=`Total Tests`)) + geom_bar(stat='identity', fill='#87189D') + ggtitle('Number of Tests Conducted per Day (all Pillars)') + theme_clean()
totalTestBar
# make the plot interactive using plotly
ggplotly(totalTestBar)
library(stringr)
library(dplyr)
library(readr)
swedish_population <- 10322000
sweden <- read.csv("covid_19_sweden_stats.csv")
sweden <- sweden %>% mutate(sweden_death_rate=format(100*(Deaths/swedish_population), scientific=FALSE))
sweden
uk_population <- 66867000
uk <- read_csv("covid_19_deaths.csv")
uk <- uk %>% select(-`Global Deaths`)
uk <- uk %>% rename(deaths='UK Deaths')
uk <- uk %>% mutate(uk_death_rate=format(100*(deaths/uk_population), scientific=FALSE))
uk
uk_sweden <- sweden %>% bind_cols(uk)
uk_sweden <- uk_sweden %>% select(Date, sweden_death_rate, uk_death_rate)
uk_sweden <- uk_sweden %>% mutate(sweden_death_rate=as.numeric(sweden_death_rate), uk_death_rate=as.numeric(uk_death_rate))
uk_sweden <- uk_sweden %>% mutate(comparison=uk_death_rate/sweden_death_rate)
uk_sweden <- uk_sweden %>% mutate(sweden_death_rate=format(sweden_death_rate, scientific=FALSE), uk_death_rate=format(uk_death_rate, scientific=FALSE))
uk_sweden
#calculate the average death rates (mean and median - the values are too specific for the mode to be useful
#mean
swedish_mean_death_rate <- uk_sweden %>% summarize(mean(as.numeric(sweden_death_rate)))
str_glue("Swedish mean death rate: {swedish_mean_death_rate}")
uk_mean_death_rate <- uk_sweden %>% summarize(mean(as.numeric(uk_death_rate)))
str_glue("UK mean death rate: {uk_mean_death_rate}")
mean_comparison <- uk_mean_death_rate/swedish_mean_death_rate
str_glue("When comparing mean death rates, the UK death rate is {mean_comparison} times the Swedish death rate.")
#median
swedish_median_death_rate <- uk_sweden %>% summarize(median(as.numeric(sweden_death_rate)))
uk_median_death_rate <- uk_sweden %>% summarize(median(as.numeric(uk_death_rate)))
median_comparison <- uk_median_death_rate/swedish_median_death_rate
swedish_median_death_rate <- format(swedish_median_death_rate, scientific=FALSE)
uk_median_death_rate <- format(uk_median_death_rate, scientific=FALSE)
str_glue("Swedish median death rate: {swedish_median_death_rate}")
str_glue("UK median death rate: {uk_median_death_rate}")
str_glue("When comparing median death rates, the UK death rate is {median_comparison} times the Swedish death rate.")
library(stringr)
library(readr)
library(dplyr)
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
one_april <- predictor(thirty_one_march)
two_april <- predictor(one_april)
three_april <- predictor(two_april)
four_april <- predictor(three_april)
five_april <- predictor(four_april)
six_april <- predictor(five_april)
seven_april <- predictor(six_april)
eight_april <- predictor(seven_april)
nine_april <- predictor(eight_april)
ten_april <- predictor(nine_april)
eleven_april <- predictor(ten_april)
twelve_april <- predictor(eleven_april)
thirteen_april <- predictor(twelve_april)
fourteen_april <- predictor(thirteen_april)
fifteen_april <- predictor(fourteen_april)
sixteen_april <- predictor(fifteen_april)
seventeen_april <- predictor(sixteen_april)
eighteen_april <- predictor(seventeen_april)
nineteen_april <- predictor(eighteen_april)
twenty_april <- predictor(nineteen_april)
twentyone_april <- predictor(twenty_april)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-15", "2020-04-16", "2020-04-17", "2020-04-18", "2020-04-19", "2020-04-20", "2020-04-21"))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march, one_april, two_april, three_april, four_april, five_april, six_april, seven_april, eight_april, nine_april, ten_april, eleven_april, twelve_april, thirteen_april, fourteen_april, fifteen_april, sixteen_april, seventeen_april, eighteen_april, nineteen_april, twenty_april, twentyone_april)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
predictions <- predictions %>% mutate(predicted_deaths=as.numeric(predicted_deaths))
predictions <- predictions %>% mutate(predicted_deaths_third=1.3*(predicted_deaths/1.25))
predictions <- predictions %>% mutate(predicted_deaths_fast=1.5*(predicted_deaths/1.25))
predictions <- predictions %>% rename('Predicted Deaths (25%)'=predicted_deaths, 'Predicted Deaths (30%)'=predicted_deaths_third, 'Predicted Deaths (50%)'=predicted_deaths_fast)
predictions
#add actual number
empty <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA","NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
predictions <- predictions %>% mutate('Actual Deaths'=empty)
predictions
# 26th isn't a prediction - it's known. So, delete this row
predictions <- predictions %>% filter(date!="2020-03-26")
#add data to actual deaths
predictions <- predictions %>% mutate('Actual Deaths'=replace(as.numeric('Actual Deaths'), date==c("2020-03-27", "2020-03-28", "2020-03-29", "2020-03-30", "2020-03-31", "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11","2020-04-12", "2020-04-13", "2020-04-14", "2020-04-15", "2020-04-16", "2020-04-17", "2020-04-18", "2020-04-19", "2020-04-20", "2020-04-21"), c(578, 759, 1019, 1228, 1408, 1789, 2532, 2921, 3606, 4303, 4934, 5373, 6159, 7097,7978,8958,9875,10612,11329,12107,12868,13729,14576,15464, 16060,16509)))
predictions
# work out actual growth rate
#1 - define function
rater <- function(today_deaths, yesterday_deaths) {1+(today_deaths-yesterday_deaths)/yesterday_deaths}
test <- rater(579, 463)
test
predictions <- predictions %>% rename(deaths='Actual Deaths')
predictions <- predictions %>% mutate(new_deaths=c(deaths[1], diff(deaths)))
#predictions <- predictions %>% mutate(yesterday=c(deaths[1], diff(deaths)))
predictions <- predictions %>% mutate(rate=1+new_deaths/lag(deaths))
predictions <- predictions %>% mutate(rate=format(rate, digits = 3))
#predictions <- predictions %>% mutate(rate=c(1+new_deaths[1]/deaths))
predictions <- predictions %>% mutate(new_deaths=replace(as.numeric(new_deaths), date=="2020-03-27", NA))
predictions
library(lubridate)
#average growth rate (cumulative, from 2020-03-28 to most recent stats)
predictions <- predictions %>% mutate(rate=as.numeric(rate))
excludes_first_row <- predictions %>% filter(date!="2020-03-27")
cumulative <- excludes_first_row %>% filter(date < today())
cumulative_mean_growth_rate <- cumulative %>% summarize(mean(rate))
str_glue("Cumulative mean growth rate starting 28th March: {cumulative_mean_growth_rate}")
# cumulative growth rate to 05/04/2020 (i.e. measured on 06/04) = 1.24444444444444
# cumulative growth rate to 06/04/2020 = 1.23
# cumulative growth rate to 07/04/2020 = 1.21818181818182
# cumulative growth rate to 08/04/2020 = 1.20833333333333
# cumulative growth rate to 09/04/2020 = 1.20769230769231
# cumulative growth rate to 10/04/2020 = 1.2
# cumulative growth rate to 11/04/2020 = 1.19333333333333
# cumulative growth rate to 12/04/2020 = 1.1875
# cumulative growth rate to 13/04/2020 = 1.18235294117647
# cumulative growth rate to 14/04/2020 =  1.18277777777778
# cumulative growth rate to 15/04/2020 = 1.17684210526316
# cumulative growth rate to 16/04/2020 = 1.171
# cumulative growth rate to 17/04/2020 = 1.16619047619048
# cumulative growth rate to 18/04/2020 = 1.16136363636364
# cumulative growth rate to 19/04/2020 = 1.15695652173913
# cumulative growth rate to 19/04/2020 = 1.15208333333333
# cumulative growth rate to 19/04/2020 =
#average growth rate (last five days) I'd like to automate this, but for now I will make a new variable every day
#over time, I expect to see the mean for the last five days fall.
last_five_days <- cumulative %>% filter(date >"2020-03-28")
#last_five_days
last_five_days_mean_growth_rate <- last_five_days %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (28th March-2nd April): {last_five_days_mean_growth_rate}")
five_days_to_third_april <- last_five_days %>% filter(date > "2020-03-29")
five_days_to_third_april_mean_growth_rate <- five_days_to_third_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (29th March-3rd April): {five_days_to_third_april_mean_growth_rate}")
five_days_to_fourth_april <- last_five_days %>% filter(date > "2020-03-30")
five_days_to_fourth_april_mean_growth_rate <- five_days_to_fourth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (30th March-4th April): {five_days_to_fourth_april_mean_growth_rate}")
five_days_to_fifth_april <- last_five_days %>% filter(date > "2020-03-31")
five_days_to_fifth_april_mean_growth_rate <- five_days_to_fifth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (31st March-5th April): {five_days_to_fifth_april_mean_growth_rate}")
five_days_to_sixth_april <- last_five_days %>% filter(date > "2020-04-01")
five_days_to_sixth_april_mean_growth_rate <- five_days_to_sixth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (1st-6th April): {five_days_to_sixth_april_mean_growth_rate}")
five_days_to_seventh_april <- last_five_days %>% filter(date > "2020-04-02")
five_days_to_seventh_april_mean_growth_rate <- five_days_to_seventh_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (2nd-7th April): {five_days_to_seventh_april_mean_growth_rate}")
five_days_to_eighth_april <- last_five_days %>% filter(date > "2020-04-03")
five_days_to_eighth_april_mean_growth_rate <- five_days_to_eighth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (3rd-8th April): {five_days_to_eighth_april_mean_growth_rate}")
five_days_to_ninth_april <- last_five_days %>% filter(date > "2020-04-04")
five_days_to_ninth_april_mean_growth_rate <- five_days_to_ninth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (4th-9th April): {five_days_to_ninth_april_mean_growth_rate}")
five_days_to_tenth_april <- last_five_days %>% filter(date > "2020-04-05")
five_days_to_tenth_april_mean_growth_rate <- five_days_to_tenth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (5th-10th April): {five_days_to_tenth_april_mean_growth_rate}")
five_days_to_eleventh_april <- last_five_days %>% filter(date > "2020-04-06")
five_days_to_eleventh_april_mean_growth_rate <- five_days_to_eleventh_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (6th-11th April): {five_days_to_eleventh_april_mean_growth_rate}")
five_days_to_twelfth_april <- last_five_days %>% filter(date > "2020-04-07")
five_days_to_twelfth_april_mean_growth_rate <- five_days_to_twelfth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (7th-12th April): {five_days_to_twelfth_april_mean_growth_rate}")
five_days_to_thirteenth_april <- last_five_days %>% filter(date > "2020-04-08")
five_days_to_thirteenth_april_mean_growth_rate <- five_days_to_thirteenth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (8th-13th April): {five_days_to_thirteenth_april_mean_growth_rate}")
five_days_to_fourteenth_april <- last_five_days %>% filter(date > "2020-04-09")
five_days_to_fourteenth_april_mean_growth_rate <- five_days_to_fourteenth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (9th-14th April): {five_days_to_fourteenth_april_mean_growth_rate}")
five_days_to_fifteenth_april <- last_five_days %>% filter(date > "2020-04-10")
five_days_to_fifteenth_april_mean_growth_rate <- five_days_to_fifteenth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (10th-15th April): {five_days_to_fifteenth_april_mean_growth_rate}")
five_days_to_sixteenth_april <- last_five_days %>% filter(date > "2020-04-11")
five_days_to_sixteenth_april_mean_growth_rate <- five_days_to_sixteenth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (11th-16th April): {five_days_to_sixteenth_april_mean_growth_rate}")
five_days_to_seventeenth_april <- last_five_days %>% filter(date > "2020-04-12")
five_days_to_seventeenth_april_mean_growth_rate <- five_days_to_seventeenth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (12th-17th April): {five_days_to_seventeenth_april_mean_growth_rate}")
five_days_to_eighteenth_april <- last_five_days %>% filter(date > "2020-04-13")
five_days_to_eighteenth_april_mean_growth_rate <- five_days_to_eighteenth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (13th-18th April): {five_days_to_eighteenth_april_mean_growth_rate}")
five_days_to_nineteenth_april <- last_five_days %>% filter(date > "2020-04-14")
five_days_to_nineteenth_april_mean_growth_rate <- five_days_to_nineteenth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (14th-19th April): {five_days_to_nineteenth_april_mean_growth_rate}")
five_days_to_twenty_april <- last_five_days %>% filter(date > "2020-04-15")
five_days_to_twenty_april_mean_growth_rate <- five_days_to_twenty_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (15th-20th April): {five_days_to_twenty_april_mean_growth_rate}")
five_days_to_twentyone_april <- last_five_days %>% filter(date > "2020-04-16")
five_days_to_twentyone_april_mean_growth_rate <- five_days_to_twentyone_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (16th-21st April): {five_days_to_twentyone_april_mean_growth_rate}")
# for comparison, log the known daily growth rate
known_cases <- read.csv('covid_19_deaths.csv')
known_cases <- known_cases %>% select(-Global.Deaths)
known_cases <- known_cases %>% mutate(new_deaths=c(UK.Deaths[1], diff(UK.Deaths)))
known_cases <- known_cases %>% mutate(rate=1+new_deaths/lag(UK.Deaths))
known_cases <- known_cases %>% mutate(rate=format(rate, digits = 3))
known_cases
library(ggplot2)
library(plotly)
library(tidyr)
# library(scales)
known_cases$Date
known_cases$Date <- as.Date(known_cases$Date, tryFormats="%y-%m-%d")
library(tidyr)
library(dplyr)
library(stringr)
library(readr)
library(lubridate)
deaths <- read_csv('covid_19_deaths.csv')
deaths <- deaths %>% mutate(infection_date=Date-days(14))
deaths <- deaths %>% rename(death_date=Date, deaths=`UK Deaths`)
uk_data <- deaths %>% select(-`Global Deaths`)
head(uk_data)
#add columns for various estimated death rates (0.1%, 0.5%, 1%, 2%, 3%)
uk_data <- uk_data %>% mutate(estimated_uk_cases_tenth=(deaths*1000))
uk_data <- uk_data %>% mutate(estimated_uk_cases_one=(deaths*100))
uk_data <- uk_data %>% mutate(estimated_uk_cases_two=(deaths*50))
uk_data
# order should be two, one, tenth (as this shows the min-max range better)
# using only estimates of 1% death rate and growth rate of doubling every 3-4 days (which means quadrupling in a week)
predictor <- function(previous_value) {
predicted_value <- previous_value * 1.25
return(predicted_value)
}
# create predictions for each date
twentyTwoMarch <- 1.25 * 360500
twentyThreeMarch <- predictor(twentyTwoMarch)
twentyFourMarch <- predictor(twentyThreeMarch)
twentyFiveMarch <- predictor(twentyFourMarch)
twentySixMarch <- predictor(twentyFiveMarch)
twentySevenMarch <- predictor(twentySixMarch)
twentyEightMarch <- predictor(twentySevenMarch)
twentyNineMarch <- predictor(twentyEightMarch)
thirtyMarch <- predictor(twentyNineMarch)
thirtyOneMarch <- predictor(thirtyMarch)
oneApril <- predictor(thirtyOneMarch)
twoApril <- predictor(oneApril)
threeApril <- predictor(twoApril)
fourApril <- predictor(threeApril)
fiveApril <- predictor(fourApril)
sixApril <- predictor(fiveApril)
sevenApril <- predictor(sixApril)
eightApril <- predictor(sevenApril)
nineApril <- predictor(eightApril)
tenApril <- predictor(nineApril)
elevenApril <- predictor(tenApril)
twelveApril <- predictor(elevenApril)
thirteenApril <- predictor(twelveApril)
fourteenApril <- predictor(thirteenApril)
fifteenApril <- predictor(fourteenApril)
sixteenApril <- predictor(fifteenApril)
seventeenApril <- predictor(sixteenApril)
eighteenApril <- predictor(seventeenApril)
nineteenApril <- predictor(eighteenApril)
twentyApril <- predictor(nineteenApril)
twentyoneApril <- predictor(twentyApril)
twentytwoApril <- predictor(twentyoneApril)
twentythreeApril <- predictor(twentytwoApril)
twentyfourApril <- predictor(twentythreeApril)
# create vectors to populate the columns
date <- as.Date(c("2020-03-22", "2020-03-23", "2020-03-24", "2020-03-25", '2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-15", "2020-04-16", "2020-04-17", "2020-04-18", "2020-04-19", "2020-04-20", "2020-04-21", "2020-04-22", "2020-04-23", "2020-04-24"))
estimated_infections_no_action <- c(twentyTwoMarch, twentyThreeMarch, twentyFourMarch, twentyFiveMarch,twentySixMarch, twentySevenMarch, twentyEightMarch, twentyNineMarch, thirtyMarch, thirtyOneMarch, oneApril, twoApril, threeApril, fourApril, fiveApril, sixApril, sevenApril, eightApril, nineApril, tenApril, elevenApril, twelveApril, thirteenApril, fourteenApril, fifteenApril, sixteenApril, seventeenApril, eighteenApril, nineteenApril, twentyApril, twentyoneApril, twentytwoApril, twentythreeApril, twentyfourApril)
# create the data frame
predicted_infections <- data.frame(date, estimated_infections_no_action)
# tidy the estimated_infections column
#predicted_infections <- predicted_infections %>% mutate(estimated_infections=format(estimated_infections, big.mark = ","))
# inspect the data frame
predicted_infections
# create a function that uses a growth rate of 1.125 - half of the 25%. This is the estimate for the not-yet-lockdown that existed up to 23rd March. So, the estimate assumes that the social distancing measures reduced the infection rate by a half.
half_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.125
return(predicted_value)
}
# create a function that uses a growth rate of 1.0625 - quarter of the 25%. This is the estimated impact of the lockdown implemented by the UK government on 23rd March (but since the lockdown was announced in the evening, and it would take a full day for its effects to be felt in statistics, I will assume that its effects began on 25th March).
lockdown_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.0625
return(predicted_value)
}
# create predictions for each date
twentyTwoMarch <- 1.125 * 360500
twentyThreeMarch <- half_predictor(twentyTwoMarch)
twentyFourMarch <- half_predictor(twentyThreeMarch)
twentyFiveMarch <- lockdown_predictor(twentyFourMarch)
twentySixMarch <- lockdown_predictor(twentyFiveMarch)
twentySevenMarch <- lockdown_predictor(twentySixMarch)
twentyEightMarch <- lockdown_predictor(twentySevenMarch)
twentyNineMarch <- lockdown_predictor(twentyEightMarch)
thirtyMarch <- lockdown_predictor(twentyNineMarch)
thirtyOneMarch <- lockdown_predictor(thirtyMarch)
oneApril <- lockdown_predictor(thirtyOneMarch)
twoApril <- lockdown_predictor(oneApril)
threeApril <- lockdown_predictor(twoApril)
fourApril <- lockdown_predictor(threeApril)
fiveApril <- lockdown_predictor(fourApril)
sixApril <- lockdown_predictor(fiveApril)
sevenApril <- lockdown_predictor(sixApril)
eightApril <- lockdown_predictor(sevenApril)
nineApril <- lockdown_predictor(eightApril)
tenApril <- lockdown_predictor(nineApril)
elevenApril <- lockdown_predictor(tenApril)
twelveApril <- lockdown_predictor(elevenApril)
thirteen_April <- lockdown_predictor(twelveApril)
fourteen_April <- lockdown_predictor(thirteen_April)
fifteen_April <- lockdown_predictor(fourteen_April)
sixteen_April <- lockdown_predictor(fifteen_April)
seventeen_April <- lockdown_predictor(sixteen_April)
eighteen_April <- lockdown_predictor(seventeen_April)
nineteen_April <- lockdown_predictor(eighteen_April)
twenty_April <- lockdown_predictor(nineteen_April)
twentyone_April <- lockdown_predictor(twenty_April)
twentytwo_April <- lockdown_predictor(twentyone_April)
twentythree_April <- lockdown_predictor(twentytwo_April)
twentyfour_April <- lockdown_predictor(twentythree_April)
# create vectors to populate the columns
date <- as.Date(c("2020-03-22", "2020-03-23", "2020-03-24", "2020-03-25", '2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-15", "2020-04-16", "2020-04-17", "2020-04-18", "2020-04-19", "2020-04-20", "2020-04-21", "2020-04-22", "2020-04-23", "2020-04024"))
estimated_infections_lockdown <- c(twentyTwoMarch, twentyThreeMarch, twentyFourMarch, twentyFiveMarch,twentySixMarch, twentySevenMarch, twentyEightMarch, twentyNineMarch, thirtyMarch, thirtyOneMarch, oneApril, twoApril, threeApril, fourApril, fiveApril, sixApril, sevenApril, eightApril, nineApril, tenApril, elevenApril, twelveApril, thirteen_April, fourteen_April, fifteen_April, sixteen_April, seventeen_April, eighteen_April, nineteen_April, twenty_April, twentyone_April, twentytwo_April, twentythree_April, twentyfour_April)
# create the data frame
lockdown_infection_rates <- data.frame(date, estimated_infections_lockdown)
# tidy the estimated_infections column
#lockdown_infection_rates <- lockdown_infection_rates %>% mutate(estimated_infections_lockdown=format(estimated_infections_lockdown, scientific = FALSE))
# inspect the data frame
lockdown_infection_rates
compared_infections <- predicted_infections %>% bind_cols(estimated_infections_lockdown=lockdown_infection_rates$estimated_infections_lockdown)
compared_infections
#compared_infections <- compared_infections %>% mutate(estimated_infections=format(estimated_infections, big.mark = ","))
#compared_infections <- compared_infections %>% mutate(estimated_infections_lockdown=as.numeric(estimated_infections_lockdown))
#compared_infections <- compared_infections %>% mutate(estimated_infections_lockdown=format(estimated_infections_lockdown, big.mark = ","))
compared_infections
# first, put the columns back to numeric format
#compared_infections_and_deaths <- compared_infections %>% mutate(estimated_infections=as.numeric(estimated_infections))
compared_infections_and_deaths <- compared_infections %>% mutate(estimated_deaths_no_action=0.01*estimated_infections_no_action)
compared_infections_and_deaths <- compared_infections_and_deaths %>% mutate(estimated_deaths_lockdown=0.01*estimated_infections_lockdown)
compared_infections_and_deaths
compared_infections_and_deaths_dates <- compared_infections_and_deaths %>% mutate(death_date_14_days=as.Date(date + days(14)))
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(death_date_7_days=as.Date(date + days(7)))
# add a column to review the results on a daily basis.
assess <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment = assess)
library(readr)
df <- read.csv('tests_for_lockdown.csv')
df
library(readr)
df <- read.csv('tests_for_lockdown.csv')
df
library(readr)
df <- read.csv('tests_for_lockdown.csv')
df
library(readr)
df <- read.csv('tests_for_lockdown.csv')
df
library(readr)
df <- read.csv('tests_for_lockdown.csv')
df
library(readr)
df <- read.csv('tests_for_lockdown.csv')
df
library(readr)
df <- read.csv('tests_for_lockdown.csv')
df
library(readr)
df <- read.csv('tests_for_lockdown.csv')
df
