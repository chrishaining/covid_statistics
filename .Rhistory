comparison_line <- ggplot(uk_sweden, aes(x=Date)) + geom_line(aes(y=sweden_death_rate, color="blue")) + geom_line(aes(y=uk_death_rate, color='red')) + geom_text(aes(x=as.Date("2020-03-01"), y=	0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=	0.0022, label="UK"))
comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(ggplot2)
comparison_line <- ggplot(uk_sweden, aes(x=Date)) + geom_line(aes(y=sweden_death_rate), color="blue") + geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=	0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=	0.0022, label="UK"))
comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(ggplot2)
comparison_line <- ggplot(uk_sweden, aes(x=Date)) + geom_line(aes(y=sweden_death_rate), color="blue") + geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(ggplot2)
comparison_line <- ggplot(uk_sweden, aes(x=Date)) + geom_line(aes(y=sweden_death_rate), color="blue")
#+ geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(ggplot2)
comparison_line <- ggplot(uk_sweden, aes(x=Date)) + geom_line(aes(y=sweden_death_rate))
#+ geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(ggplot2)
comparison_line <- ggplot(uk_sweden, aes(x=Date, y=sweden_death_rate)) + geom_line()
#+ geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(ggplot2)
library(tidyr)
comparison_line <- ggplot(uk_sweden, aes(x=Date)) + geom_line(aes(y=sweden_death_rate), color="blue") + geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(ggplot2)
library(tidyr)
library("tidyverse")
library(ggplot2)
library(tidyr)
#library("tidyverse")
df <- uk_sweden %>% gather(key = "variable", value = "value", -Date)
head(df)
#comparison_line <- ggplot(uk_sweden, aes(x=Date)) + geom_line(aes(y=sweden_death_rate), color="blue") + geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
#comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(ggplot2)
library(tidyr)
#library("tidyverse")
df <- uk_sweden %>% gather(key = "variable", value = "value", -Date)
#head(df)
comparison_line <- ggplot(uk_sweden, aes(x=Date)) + geom_line(aes(y=sweden_death_rate), color="blue") + geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(ggplot2)
library(tidyr)
#library("tidyverse")
df <- uk_sweden %>% gather(key = "variable", value = "value", -Date)
#head(df)
comparison_line <- ggplot(df, aes(x=Date)) + geom_line(aes(y=sweden_death_rate), color="blue") + geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
comparison_line
library(ggplot2)
library(tidyr)
#library("tidyverse")
df <- uk_sweden %>% gather(key = "variable", value = "value", -Date)
#head(df)
ggplot(df, aes(x = date, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue"))
library(ggplot2)
library(tidyr)
#library("tidyverse")
df <- uk_sweden %>% gather(key = "variable", value = "value", -Date)
#head(df)
ggplot(df, aes(x = Date, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue"))
#comparison_line <- ggplot(df, aes(x=Date)) + geom_line(aes(y=sweden_death_rate), color="blue") + geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
#comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(ggplot2)
library(tidyr)
#library("tidyverse")
df <- uk_sweden %>% gather(key = "variable", value = "value", -Date)
#head(df)
ggplot(df, aes(x = Date, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue"))
install.packages("tidyverse")
#comparison_line <- ggplot(df, aes(x=Date)) + geom_line(aes(y=sweden_death_rate), color="blue") + geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
#comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(ggplot2)
library(tidyr)
install.packages("tidyverse")
library("tidyverse")
df <- uk_sweden %>% gather(key = "variable", value = "value", -Date)
#head(df)
ggplot(df, aes(x = Date, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue"))
#comparison_line <- ggplot(df, aes(x=Date)) + geom_line(aes(y=sweden_death_rate), color="blue") + geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
#comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
library(scales)
library(ggplot2)
library(tidyr)
install.packages("tidyverse")
library("tidyverse")
library(scales)
df <- uk_sweden %>% gather(key = "variable", value = "value", -Date)
#head(df)
ggplot(df, aes(x = Date, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue"))
#comparison_line <- ggplot(df, aes(x=Date)) + geom_line(aes(y=sweden_death_rate), color="blue") + geom_line(aes(y=uk_death_rate), color='red') + geom_text(aes(x=as.Date("2020-03-01"), y=0.00000000000, label="Sweden")) + geom_text(aes(x=as.Date("2020-03-25"), y=0.0022, label="UK"))
#comparison_line
#psavert_label <- "PSAVERT"
#uempmed_label <- "UEMPMED"
#ggplot(economics, aes(x=date)) +
#  geom_line(aes(y = psavert), color = "darkred") +
#geom_line(aes(y = uempmed), color="steelblue", linetype="twodash") + geom_text(aes(x=as.Date("1968-10-01"), y = 15, label=psavert_label)) + #geom_text(aes(x=as.Date("2013-10-01"), y = 25, label=uempmed_label)) + labs(title="US Personal Savings Rate and Median Weeks Unemployed, #1967-2015")
install.packages("tidyverse")
library(stringr)
library(readr)
library(dplyr)
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
one_april <- predictor(thirty_one_march)
two_april <- predictor(one_april)
three_april <- predictor(two_april)
four_april <- predictor(three_april)
five_april <- predictor(four_april)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05"))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march, one_april, two_april, three_april, four_april, five_april)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
predictions <- predictions %>% mutate(predicted_deaths=as.numeric(predicted_deaths))
predictions <- predictions %>% mutate(predicted_deaths_third=1.3*(predicted_deaths/1.25))
predictions <- predictions %>% mutate(predicted_deaths_fast=1.5*(predicted_deaths/1.25))
predictions <- predictions %>% rename('Predicted Deaths (25%)'=predicted_deaths, 'Predicted Deaths (30%)'=predicted_deaths_third, 'Predicted Deaths (50%)'=predicted_deaths_fast)
predictions
#add actual number
empty <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
predictions <- predictions %>% mutate('Actual Deaths'=empty)
predictions
# 26th isn't a prediction - it's known. So, delete this row
predictions <- predictions %>% filter(date!="2020-03-26")
#add data to actual deaths
predictions <- predictions %>% mutate('Actual Deaths'=replace(as.numeric('Actual Deaths'), date==c("2020-03-27", "2020-03-28", "2020-03-29", "2020-03-30", "2020-03-31", "2020-04-01", "2020-04-02"), c(578, 759, 1019, 1228, 1408, 1789, 2532)))
predictions
# work out actual growth rate
#1 - define function
rater <- function(today_deaths, yesterday_deaths) {1+(today_deaths-yesterday_deaths)/yesterday_deaths}
test <- rater(579, 463)
test
predictions <- predictions %>% rename(deaths='Actual Deaths')
predictions <- predictions %>% mutate(new_deaths=c(deaths[1], diff(deaths)))
#predictions <- predictions %>% mutate(yesterday=c(deaths[1], diff(deaths)))
predictions <- predictions %>% mutate(rate=1+new_deaths/lag(deaths))
predictions <- predictions %>% mutate(rate=format(rate, digits = 2))
#predictions <- predictions %>% mutate(rate=c(1+new_deaths[1]/deaths))
predictions <- predictions %>% mutate(new_deaths=replace(as.numeric(new_deaths), date=="2020-03-27", NA))
predictions
library(lubridate)
#average growth rate (cumulative, from 2020-03-28 to most recent stats)
predictions <- predictions %>% mutate(rate=as.numeric(rate))
excludes_first_row <- predictions %>% filter(date!="2020-03-27")
cumulative <- excludes_first_row %>% filter(date < today())
cumulative_mean_growth_rate <- cumulative %>% summarize(mean(rate))
str_glue("Cumulative mean growth rate starting 28th March: {cumulative_mean_growth_rate}")
#average growth rate (last five days) I'd like to automate this, but for now I will make a new variable every day
#over time, I expect to see the mean for the last five days fall.
last_five_days <- cumulative %>% filter(date >"2020-03-28")
#last_five_days
last_five_days_mean_growth_rate <- last_five_days %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (28th March-2nd April): {last_five_days_mean_growth_rate}")
# for comparison, log the known daily growth rate
known_cases <- read.csv('covid_19_deaths.csv')
known_cases <- known_cases %>% select(-Global.Deaths)
known_cases <- known_cases %>% mutate(new_deaths=c(UK.Deaths[1], diff(UK.Deaths)))
known_cases <- known_cases %>% mutate(rate=1+new_deaths/lag(UK.Deaths))
known_cases <- known_cases %>% mutate(rate=format(rate, digits = 2))
known_cases
library(stringr)
library(dplyr)
library(readr)
swedish_population <- 10322000
sweden <- read.csv("covid_19_sweden_stats.csv")
sweden <- sweden %>% mutate(sweden_death_rate=format(100*(Deaths/swedish_population), scientific=FALSE))
sweden
uk_population <- 66867000
uk <- read_csv("covid_19_deaths.csv")
uk <- uk %>% select(-`Global Deaths`)
uk <- uk %>% rename(deaths='UK Deaths')
uk <- uk %>% mutate(uk_death_rate=format(100*(deaths/uk_population), scientific=FALSE))
uk
uk_sweden <- sweden %>% bind_cols(uk)
uk_sweden <- uk_sweden %>% select(Date, sweden_death_rate, uk_death_rate)
uk_sweden <- uk_sweden %>% mutate(sweden_death_rate=as.numeric(sweden_death_rate), uk_death_rate=as.numeric(uk_death_rate))
uk_sweden <- uk_sweden %>% mutate(comparison=uk_death_rate/sweden_death_rate)
uk_sweden <- uk_sweden %>% mutate(sweden_death_rate=format(sweden_death_rate, scientific=FALSE), uk_death_rate=format(uk_death_rate, scientific=FALSE))
uk_sweden
#calculate the average death rates (mean and median - the values are too specific for the mode to be useful
#mean
swedish_mean_death_rate <- uk_sweden %>% summarize(mean(as.numeric(sweden_death_rate)))
str_glue("Swedish mean death rate: {swedish_mean_death_rate}")
uk_mean_death_rate <- uk_sweden %>% summarize(mean(as.numeric(uk_death_rate)))
str_glue("UK mean death rate: {uk_mean_death_rate}")
mean_comparison <- uk_mean_death_rate/swedish_mean_death_rate
str_glue("When comparing mean death rates, the UK death rate is {mean_comparison} times the Swedish death rate.")
#median
swedish_median_death_rate <- uk_sweden %>% summarize(median(as.numeric(sweden_death_rate)))
uk_median_death_rate <- uk_sweden %>% summarize(median(as.numeric(uk_death_rate)))
median_comparison <- uk_median_death_rate/swedish_median_death_rate
swedish_median_death_rate <- format(swedish_median_death_rate, scientific=FALSE)
uk_median_death_rate <- format(uk_median_death_rate, scientific=FALSE)
str_glue("Swedish median death rate: {swedish_median_death_rate}")
str_glue("UK median death rate: {uk_median_death_rate}")
str_glue("When comparing median death rates, the UK death rate is {median_comparison} times the Swedish death rate.")
library(ggplot2)
library(tidyr)
install.packages("tidyverse")
library("tidyverse")
library(scales)
df <- uk_sweden %>% gather(key = "variable", value = "value", -Date)
#head(df)
ggplot(df, aes(x = Date, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue"))
library(stringr)
library(readr)
library(dplyr)
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
one_april <- predictor(thirty_one_march)
two_april <- predictor(one_april)
three_april <- predictor(two_april)
four_april <- predictor(three_april)
five_april <- predictor(four_april)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05"))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march, one_april, two_april, three_april, four_april, five_april)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
predictions <- predictions %>% mutate(predicted_deaths=as.numeric(predicted_deaths))
predictions <- predictions %>% mutate(predicted_deaths_third=1.3*(predicted_deaths/1.25))
predictions <- predictions %>% mutate(predicted_deaths_fast=1.5*(predicted_deaths/1.25))
predictions <- predictions %>% rename('Predicted Deaths (25%)'=predicted_deaths, 'Predicted Deaths (30%)'=predicted_deaths_third, 'Predicted Deaths (50%)'=predicted_deaths_fast)
predictions
#add actual number
empty <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
predictions <- predictions %>% mutate('Actual Deaths'=empty)
predictions
# 26th isn't a prediction - it's known. So, delete this row
predictions <- predictions %>% filter(date!="2020-03-26")
#add data to actual deaths
predictions <- predictions %>% mutate('Actual Deaths'=replace(as.numeric('Actual Deaths'), date==c("2020-03-27", "2020-03-28", "2020-03-29", "2020-03-30", "2020-03-31", "2020-04-01", "2020-04-02", "2020-04-03"), c(578, 759, 1019, 1228, 1408, 1789, 2532, 2921)))
predictions
# work out actual growth rate
#1 - define function
rater <- function(today_deaths, yesterday_deaths) {1+(today_deaths-yesterday_deaths)/yesterday_deaths}
test <- rater(579, 463)
test
predictions <- predictions %>% rename(deaths='Actual Deaths')
predictions <- predictions %>% mutate(new_deaths=c(deaths[1], diff(deaths)))
#predictions <- predictions %>% mutate(yesterday=c(deaths[1], diff(deaths)))
predictions <- predictions %>% mutate(rate=1+new_deaths/lag(deaths))
predictions <- predictions %>% mutate(rate=format(rate, digits = 2))
#predictions <- predictions %>% mutate(rate=c(1+new_deaths[1]/deaths))
predictions <- predictions %>% mutate(new_deaths=replace(as.numeric(new_deaths), date=="2020-03-27", NA))
predictions
library(lubridate)
#average growth rate (cumulative, from 2020-03-28 to most recent stats)
predictions <- predictions %>% mutate(rate=as.numeric(rate))
excludes_first_row <- predictions %>% filter(date!="2020-03-27")
cumulative <- excludes_first_row %>% filter(date < today())
cumulative_mean_growth_rate <- cumulative %>% summarize(mean(rate))
str_glue("Cumulative mean growth rate starting 28th March: {cumulative_mean_growth_rate}")
#average growth rate (last five days) I'd like to automate this, but for now I will make a new variable every day
#over time, I expect to see the mean for the last five days fall.
last_five_days <- cumulative %>% filter(date >"2020-03-28")
#last_five_days
last_five_days_mean_growth_rate <- last_five_days %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (28th March-2nd April): {last_five_days_mean_growth_rate}")
# for comparison, log the known daily growth rate
known_cases <- read.csv('covid_19_deaths.csv')
known_cases <- known_cases %>% select(-Global.Deaths)
known_cases <- known_cases %>% mutate(new_deaths=c(UK.Deaths[1], diff(UK.Deaths)))
known_cases <- known_cases %>% mutate(rate=1+new_deaths/lag(UK.Deaths))
known_cases <- known_cases %>% mutate(rate=format(rate, digits = 2))
known_cases
library(stringr)
library(dplyr)
library(readr)
swedish_population <- 10322000
sweden <- read.csv("covid_19_sweden_stats.csv")
sweden <- sweden %>% mutate(sweden_death_rate=format(100*(Deaths/swedish_population), scientific=FALSE))
sweden
uk_population <- 66867000
uk <- read_csv("covid_19_deaths.csv")
uk <- uk %>% select(-`Global Deaths`)
uk <- uk %>% rename(deaths='UK Deaths')
uk <- uk %>% mutate(uk_death_rate=format(100*(deaths/uk_population), scientific=FALSE))
uk
uk_sweden <- sweden %>% bind_cols(uk)
uk_sweden <- uk_sweden %>% select(Date, sweden_death_rate, uk_death_rate)
uk_sweden <- uk_sweden %>% mutate(sweden_death_rate=as.numeric(sweden_death_rate), uk_death_rate=as.numeric(uk_death_rate))
uk_sweden <- uk_sweden %>% mutate(comparison=uk_death_rate/sweden_death_rate)
uk_sweden <- uk_sweden %>% mutate(sweden_death_rate=format(sweden_death_rate, scientific=FALSE), uk_death_rate=format(uk_death_rate, scientific=FALSE))
uk_sweden
#calculate the average death rates (mean and median - the values are too specific for the mode to be useful
#mean
swedish_mean_death_rate <- uk_sweden %>% summarize(mean(as.numeric(sweden_death_rate)))
str_glue("Swedish mean death rate: {swedish_mean_death_rate}")
uk_mean_death_rate <- uk_sweden %>% summarize(mean(as.numeric(uk_death_rate)))
str_glue("UK mean death rate: {uk_mean_death_rate}")
mean_comparison <- uk_mean_death_rate/swedish_mean_death_rate
str_glue("When comparing mean death rates, the UK death rate is {mean_comparison} times the Swedish death rate.")
#median
swedish_median_death_rate <- uk_sweden %>% summarize(median(as.numeric(sweden_death_rate)))
uk_median_death_rate <- uk_sweden %>% summarize(median(as.numeric(uk_death_rate)))
median_comparison <- uk_median_death_rate/swedish_median_death_rate
swedish_median_death_rate <- format(swedish_median_death_rate, scientific=FALSE)
uk_median_death_rate <- format(uk_median_death_rate, scientific=FALSE)
str_glue("Swedish median death rate: {swedish_median_death_rate}")
str_glue("UK median death rate: {uk_median_death_rate}")
str_glue("When comparing median death rates, the UK death rate is {median_comparison} times the Swedish death rate.")
library(ggplot2)
library(tidyr)
install.packages("tidyverse")
library("tidyverse")
library(scales)
df <- uk_sweden %>% gather(key = "variable", value = "value", -Date)
#head(df)
ggplot(df, aes(x = Date, y = value)) +
geom_line(aes(color = variable, linetype = variable)) +
scale_color_manual(values = c("darkred", "steelblue"))
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
one_april <- predictor(thirty_one_march)
two_april <- predictor(one_april)
three_april <- predictor(two_april)
four_april <- predictor(three_april)
five_april <- predictor(four_april)
six_april <- predictor(five_april)
seven_april <- predictor(six_april)
eight_april <- predictor(seven_april)
nine_april <- predictor(eight_april)
ten_april <- predictor(nine_april)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10"))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march, one_april, two_april, three_april, four_april, five_april, six_april, seven_april, eight_april, nine_april, ten_april)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
library(stringr)
library(readr)
library(dplyr)
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
one_april <- predictor(thirty_one_march)
two_april <- predictor(one_april)
three_april <- predictor(two_april)
four_april <- predictor(three_april)
five_april <- predictor(four_april)
six_april <- predictor(five_april)
seven_april <- predictor(six_april)
eight_april <- predictor(seven_april)
nine_april <- predictor(eight_april)
ten_april <- predictor(nine_april)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10"))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march, one_april, two_april, three_april, four_april, five_april, six_april, seven_april, eight_april, nine_april, ten_april)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
predictions <- predictions %>% mutate(predicted_deaths=as.numeric(predicted_deaths))
predictions <- predictions %>% mutate(predicted_deaths_third=1.3*(predicted_deaths/1.25))
predictions <- predictions %>% mutate(predicted_deaths_fast=1.5*(predicted_deaths/1.25))
predictions <- predictions %>% rename('Predicted Deaths (25%)'=predicted_deaths, 'Predicted Deaths (30%)'=predicted_deaths_third, 'Predicted Deaths (50%)'=predicted_deaths_fast)
predictions
#add actual number
empty <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
predictions <- predictions %>% mutate('Actual Deaths'=empty)
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
one_april <- predictor(thirty_one_march)
two_april <- predictor(one_april)
three_april <- predictor(two_april)
four_april <- predictor(three_april)
five_april <- predictor(four_april)
six_april <- predictor(five_april)
seven_april <- predictor(six_april)
eight_april <- predictor(seven_april)
nine_april <- predictor(eight_april)
ten_april <- predictor(nine_april)
eleven_april <- predictor(ten_april)
twelve_april <- predictor(eleven_april)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12"))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march, one_april, two_april, three_april, four_april, five_april, six_april, seven_april, eight_april, nine_april, ten_april, eleven_april, twelve_april)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
predictions <- predictions %>% mutate(predicted_deaths=as.numeric(predicted_deaths))
predictions <- predictions %>% mutate(predicted_deaths_third=1.3*(predicted_deaths/1.25))
predictions <- predictions %>% mutate(predicted_deaths_fast=1.5*(predicted_deaths/1.25))
predictions <- predictions %>% rename('Predicted Deaths (25%)'=predicted_deaths, 'Predicted Deaths (30%)'=predicted_deaths_third, 'Predicted Deaths (50%)'=predicted_deaths_fast)
predictions
