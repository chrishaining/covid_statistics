#freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
#print(speech)}
#  return()
#}
#bob <- all_frequencies()
#bob
# so, this function works, but it adds an unwanted NULL line. I'll try it without the wrapper function.
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
print(speech)}
# add risk of death (%)
results_by_deaths <- results_by_tests %>% mutate(death_risk=(deaths/population)*100)
results_by_deaths <- results_by_deaths %>% mutate(death_risk=format(death_risk, digits=2, scientific=FALSE))
results_by_deaths <- results_by_deaths %>% arrange(desc(death_risk))
results_by_deaths <- results_by_deaths %>% mutate(death_risk=as.numeric(death_risk))
results_by_deaths
# I learned how to format a number with scientific=FALSE - this trnasformed a number 9.0e-04 into something I can understand (0.015136)
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
#all_frequencies <- function() {
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
#print(speech)}
#  return()
#}
#bob <- all_frequencies()
#bob
# so, this function works, but it adds an unwanted NULL line. I'll try it without the wrapper function.
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
print(speech)}
#Note a problem with the frequency of Czech Republic, Croatia, Poland and Bulgaria. The format is "8e-04". To fix this
frequency <- function(risk, population) {
risk * population
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "death_risk"], results_by_deaths[row, "population"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(risk, population) {
population/risk
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "death_risk"], results_by_deaths[row, "population"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(risk, population) {
risk * population
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "death_risk"], results_by_deaths[row, "population"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, digits=0)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, digits=0, nsmall=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- comma_format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
comma_format(population/deaths, digits=2)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(comma_format(population/deaths, digits=2))
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(comma_format(population/deaths, digits=2))
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(comma_format(population/deaths, digits=2))
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- comma_format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freqy <- comma_format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freqy} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freqy <- comma_format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freqy} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
#freq <- format(freq, digits=2)
freq <- format(freq, big.mark = ",", scientific = FALSE)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
#freq <- format(freq, digits=2)
freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
#freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
#print(speech)}
for (row in 1:nrow(results_by_deaths)) {
if (deaths > 0) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
}
frequency <- function(population, deaths) {
return(population/deaths)
}
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
#freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
#print(speech)}
for (row in 1:nrow(results_by_deaths)) {
if (results_by_deaths[row, "deaths"] > 0) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
}
# I learned how to format the numbers with commas, using big.mark
# Note that the for loop doesn't work for countries with zero deaths. It says that 1 person in Inf has died. Solution
frequency <- function(population, deaths) {
return(population/deaths)
}
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
#freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
#print(speech)}
# Note that the for loop doesn't work for countries with zero deaths. It says that 1 person in Inf has died. Solution is to add an if statement to exclude
for (row in 1:nrow(results_by_deaths)) {
country <- results_by_deaths[row, "Country"]
if (results_by_deaths[row, "deaths"] > 0) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
else {
nil_speech <- str_glue("No one has died in {country} yet, so no frequency can be determined.")
print(nil_speech)
}
}
# I learned how to format the numbers with commas, using big.mark
library(stringr)
library(readr)
library(dplyr)
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31'))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
predictions <- predictions %>% mutate(predicted_deaths=as.numeric(predicted_deaths))
predictions <- predictions %>% mutate(predicted_deaths_fast=1.5*(predicted_deaths/1.25))
predictions <- predictions %>% rename('Predicted Deaths (25%)'=predicted_deaths, 'Predicted Deaths (50%)'=predicted_deaths_fast)
predictions
#add actual number
empty <- c("NA", "NA", "NA", "NA", "NA", "NA")
predictions <- predictions %>% mutate('Actual Deaths'=empty)
predictions
# 26th isn't a prediction - it's known. So, delete this row
predictions <- predictions %>% filter(date!="2020-03-26")
#add data to actual deaths
predictions <- predictions %>% mutate('Actual Deaths'=replace(as.numeric('Actual Deaths'), date==c( "2020-03-27", "2020-03-28"), c(578,759)))
predictions
# work out actual growth rate
#1 - define function
rater <- function(today_deaths, yesterday_deaths) {1+(today_deaths-yesterday_deaths)/yesterday_deaths}
test <- rater(579, 463)
test
#predictions <- predictions %>% rename(deaths='Actual Deaths')
predictions <- predictions %>% mutate(new_deaths=c(deaths[1], diff(deaths)))
predictions <- predictions %>% rename(deaths='Actual Deaths')
predictions <- predictions %>% mutate(new_deaths=c(deaths[1], diff(deaths)))
#predictions <- predictions %>% mutate(yesterday=c(deaths[1], diff(deaths)))
predictions <- predictions %>% mutate(rate=1+new_deaths/lag(deaths))
predictions <- predictions %>% mutate(rate=format(rate, digits = 2))
#predictions <- predictions %>% mutate(rate=c(1+new_deaths[1]/deaths))
predictions
# for comparison, log the known daily growth rate
known_cases <- read.csv('covid_19_deaths.csv')
known_cases <- known_cases %>% select(-Global.Deaths)
known_cases <- known_cases %>% mutate(new_deaths=c(UK.Deaths[1], diff(UK.Deaths)))
known_cases <- known_cases %>% mutate(rate=1+new_deaths/lag(UK.Deaths))
known_cases <- known_cases %>% mutate(rate=format(rate, digits = 2))
known_cases
#add data to actual deaths
predictions <- predictions %>% mutate('Actual Deaths'=replace(as.numeric('Actual Deaths'), date==c( "2020-03-27", "2020-03-28", "2020-03-29"), c(578,759, 1019)))
predictions
# work out actual growth rate
#1 - define function
rater <- function(today_deaths, yesterday_deaths) {1+(today_deaths-yesterday_deaths)/yesterday_deaths}
test <- rater(579, 463)
test
predictions <- predictions %>% rename(deaths='Actual Deaths')
library(stringr)
library(readr)
library(dplyr)
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31'))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
predictions <- predictions %>% mutate(predicted_deaths=as.numeric(predicted_deaths))
predictions <- predictions %>% mutate(predicted_deaths_fast=1.5*(predicted_deaths/1.25))
predictions <- predictions %>% rename('Predicted Deaths (25%)'=predicted_deaths, 'Predicted Deaths (50%)'=predicted_deaths_fast)
predictions
#add actual number
empty <- c("NA", "NA", "NA", "NA", "NA", "NA")
predictions <- predictions %>% mutate('Actual Deaths'=empty)
predictions
# 26th isn't a prediction - it's known. So, delete this row
predictions <- predictions %>% filter(date!="2020-03-26")
#add data to actual deaths
predictions <- predictions %>% mutate('Actual Deaths'=replace(as.numeric('Actual Deaths'), date==c( "2020-03-27", "2020-03-28", "2020-03-29"), c(578,759, 1019)))
predictions
# work out actual growth rate
#1 - define function
rater <- function(today_deaths, yesterday_deaths) {1+(today_deaths-yesterday_deaths)/yesterday_deaths}
test <- rater(579, 463)
test
predictions <- predictions %>% rename(deaths='Actual Deaths')
predictions <- predictions %>% mutate(new_deaths=c(deaths[1], diff(deaths)))
#predictions <- predictions %>% mutate(yesterday=c(deaths[1], diff(deaths)))
predictions <- predictions %>% mutate(rate=1+new_deaths/lag(deaths))
predictions <- predictions %>% mutate(rate=format(rate, digits = 2))
#predictions <- predictions %>% mutate(rate=c(1+new_deaths[1]/deaths))
predictions
# for comparison, log the known daily growth rate
known_cases <- read.csv('covid_19_deaths.csv')
known_cases <- known_cases %>% select(-Global.Deaths)
known_cases <- known_cases %>% mutate(new_deaths=c(UK.Deaths[1], diff(UK.Deaths)))
known_cases <- known_cases %>% mutate(rate=1+new_deaths/lag(UK.Deaths))
known_cases <- known_cases %>% mutate(rate=format(rate, digits = 2))
known_cases
library(stringr)
library(readr)
library(dplyr)
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
one_april <- predictor(thirty_one_march)
two_april <- predictor(one_april)
three_april <- predictor(two_april)
four_april <- predictor(three_april)
five_april <- predictor(four_april)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05"))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march, one_april, two_april, three_april, four_april, five_april)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
predictions <- predictions %>% mutate(predicted_deaths=as.numeric(predicted_deaths))
predictions <- predictions %>% mutate(predicted_deaths_fast=1.5*(predicted_deaths/1.25))
predictions <- predictions %>% rename('Predicted Deaths (25%)'=predicted_deaths, 'Predicted Deaths (50%)'=predicted_deaths_fast)
predictions
#add actual number
empty <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
predictions <- predictions %>% mutate('Actual Deaths'=empty)
predictions
# 26th isn't a prediction - it's known. So, delete this row
predictions <- predictions %>% filter(date!="2020-03-26")
#add data to actual deaths
predictions <- predictions %>% mutate('Actual Deaths'=replace(as.numeric('Actual Deaths'), date==c( "2020-03-27", "2020-03-28", "2020-03-29"), c(578,759, 1019)))
predictions
# work out actual growth rate
#1 - define function
rater <- function(today_deaths, yesterday_deaths) {1+(today_deaths-yesterday_deaths)/yesterday_deaths}
test <- rater(579, 463)
test
predictions <- predictions %>% rename(deaths='Actual Deaths')
predictions <- predictions %>% mutate(new_deaths=c(deaths[1], diff(deaths)))
#predictions <- predictions %>% mutate(yesterday=c(deaths[1], diff(deaths)))
predictions <- predictions %>% mutate(rate=1+new_deaths/lag(deaths))
predictions <- predictions %>% mutate(rate=format(rate, digits = 2))
#predictions <- predictions %>% mutate(rate=c(1+new_deaths[1]/deaths))
predictions
# for comparison, log the known daily growth rate
known_cases <- read.csv('covid_19_deaths.csv')
known_cases <- known_cases %>% select(-Global.Deaths)
known_cases <- known_cases %>% mutate(new_deaths=c(UK.Deaths[1], diff(UK.Deaths)))
known_cases <- known_cases %>% mutate(rate=1+new_deaths/lag(UK.Deaths))
known_cases <- known_cases %>% mutate(rate=format(rate, digits = 2))
known_cases
library(stringr)
library(readr)
library(dplyr)
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
one_april <- predictor(thirty_one_march)
two_april <- predictor(one_april)
three_april <- predictor(two_april)
four_april <- predictor(three_april)
five_april <- predictor(four_april)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05"))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march, one_april, two_april, three_april, four_april, five_april)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
predictions <- predictions %>% mutate(predicted_deaths=as.numeric(predicted_deaths))
predictions <- predictions %>% mutate(predicted_deaths_third=1.3*(predicted_deaths/1.25))
predictions <- predictions %>% mutate(predicted_deaths_fast=1.5*(predicted_deaths/1.25))
predictions <- predictions %>% rename('Predicted Deaths (25%)'=predicted_deaths, 'Predicted Deaths (33.3%)'=predicted_deaths_third, 'Predicted Deaths (50%)'=predicted_deaths_fast)
predictions
#add actual number
empty <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
predictions <- predictions %>% mutate('Actual Deaths'=empty)
predictions
# 26th isn't a prediction - it's known. So, delete this row
predictions <- predictions %>% filter(date!="2020-03-26")
#add data to actual deaths
predictions <- predictions %>% mutate('Actual Deaths'=replace(as.numeric('Actual Deaths'), date==c( "2020-03-27", "2020-03-28", "2020-03-29"), c(578,759, 1019)))
predictions
# work out actual growth rate
#1 - define function
rater <- function(today_deaths, yesterday_deaths) {1+(today_deaths-yesterday_deaths)/yesterday_deaths}
test <- rater(579, 463)
test
predictions <- predictions %>% rename(deaths='Actual Deaths')
predictions <- predictions %>% mutate(new_deaths=c(deaths[1], diff(deaths)))
#predictions <- predictions %>% mutate(yesterday=c(deaths[1], diff(deaths)))
predictions <- predictions %>% mutate(rate=1+new_deaths/lag(deaths))
predictions <- predictions %>% mutate(rate=format(rate, digits = 2))
#predictions <- predictions %>% mutate(rate=c(1+new_deaths[1]/deaths))
predictions
# for comparison, log the known daily growth rate
known_cases <- read.csv('covid_19_deaths.csv')
known_cases <- known_cases %>% select(-Global.Deaths)
known_cases <- known_cases %>% mutate(new_deaths=c(UK.Deaths[1], diff(UK.Deaths)))
known_cases <- known_cases %>% mutate(rate=1+new_deaths/lag(UK.Deaths))
known_cases <- known_cases %>% mutate(rate=format(rate, digits = 2))
known_cases
