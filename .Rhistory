compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment=replace(fourteen_day_assessment, death_date_14_days==c("2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11"), c("As of 2020-04-05, the actual death toll was 4313", "As of 2020-04-06, the actual death toll was 4934", "As of 2020-04-07, the actual death toll was 5373", "As of 2020-04-08, the actual death toll was 6159", "As of 2020-04-09, the actual death toll was 7097", "As of 2020-04-10, the actual death toll was 7978","As of 2020-04-11, the actual death toll was 8958")))
#reorder the columns
new_order <- c("date", "estimated_infections_no_action", "estimated_infections_lockdown", "estimated_deaths_no_action",  "estimated_deaths_lockdown", "death_date_14_days", "fourteen_day_assessment", "death_date_7_days")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates[, new_order]
compared_infections_and_deaths_dates <- compared_infections_and_deaths %>% mutate(death_date_14_days=as.Date(date + days(14)))
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(death_date_28_days=as.Date(date + days(28)))
# add a column to review the results on a daily basis.
assess <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment = assess)
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment=replace(fourteen_day_assessment, death_date_14_days==c("2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11"), c("As of 2020-04-05, the actual death toll was 4313", "As of 2020-04-06, the actual death toll was 4934", "As of 2020-04-07, the actual death toll was 5373", "As of 2020-04-08, the actual death toll was 6159", "As of 2020-04-09, the actual death toll was 7097", "As of 2020-04-10, the actual death toll was 7978","As of 2020-04-11, the actual death toll was 8958")))
#reorder the columns
new_order <- c("date", "estimated_infections_no_action", "estimated_infections_lockdown", "estimated_deaths_no_action",  "estimated_deaths_lockdown", "death_date_14_days", "fourteen_day_assessment", "death_date_7_days")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates[, new_order]
compared_infections_and_deaths_dates <- compared_infections_and_deaths %>% mutate(death_date_14_days=as.Date(date + days(14)))
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(death_date_28_days=as.Date(date + days(28)))
# add a column to review the results on a daily basis.
assess <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment = assess)
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment=replace(fourteen_day_assessment, death_date_14_days==c("2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11"), c("As of 2020-04-05, the actual death toll was 4313", "As of 2020-04-06, the actual death toll was 4934", "As of 2020-04-07, the actual death toll was 5373", "As of 2020-04-08, the actual death toll was 6159", "As of 2020-04-09, the actual death toll was 7097", "As of 2020-04-10, the actual death toll was 7978","As of 2020-04-11, the actual death toll was 8958")))
#reorder the columns
new_order <- c("date", "estimated_infections_no_action", "estimated_infections_lockdown", "estimated_deaths_no_action",  "estimated_deaths_lockdown", "death_date_14_days", "fourteen_day_assessment", "death_date_28_days")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates[, new_order]
#names <- colnames(compared_infections_and_deaths_dates)
#names
compared_infections_and_deaths_dates
#add data to actual deaths
predictions <- predictions %>% mutate('Actual Deaths'=replace(as.numeric('Actual Deaths'), date==c("2020-03-27", "2020-03-28", "2020-03-29", "2020-03-30", "2020-03-31", "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11","2020-04-12"), c(578, 759, 1019, 1228, 1408, 1789, 2532, 2921, 3606, 4303, 4934, 5373, 6159, 7097,7978,8958,9875)))
library(stringr)
library(readr)
library(dplyr)
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
one_april <- predictor(thirty_one_march)
two_april <- predictor(one_april)
three_april <- predictor(two_april)
four_april <- predictor(three_april)
five_april <- predictor(four_april)
six_april <- predictor(five_april)
seven_april <- predictor(six_april)
eight_april <- predictor(seven_april)
nine_april <- predictor(eight_april)
ten_april <- predictor(nine_april)
eleven_april <- predictor(ten_april)
twelve_april <- predictor(eleven_april)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12"))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march, one_april, two_april, three_april, four_april, five_april, six_april, seven_april, eight_april, nine_april, ten_april, eleven_april, twelve_april)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
predictions <- predictions %>% mutate(predicted_deaths=as.numeric(predicted_deaths))
predictions <- predictions %>% mutate(predicted_deaths_third=1.3*(predicted_deaths/1.25))
predictions <- predictions %>% mutate(predicted_deaths_fast=1.5*(predicted_deaths/1.25))
predictions <- predictions %>% rename('Predicted Deaths (25%)'=predicted_deaths, 'Predicted Deaths (30%)'=predicted_deaths_third, 'Predicted Deaths (50%)'=predicted_deaths_fast)
predictions
#add actual number
empty <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
predictions <- predictions %>% mutate('Actual Deaths'=empty)
predictions
# 26th isn't a prediction - it's known. So, delete this row
predictions <- predictions %>% filter(date!="2020-03-26")
#add data to actual deaths
predictions <- predictions %>% mutate('Actual Deaths'=replace(as.numeric('Actual Deaths'), date==c("2020-03-27", "2020-03-28", "2020-03-29", "2020-03-30", "2020-03-31", "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11","2020-04-12"), c(578, 759, 1019, 1228, 1408, 1789, 2532, 2921, 3606, 4303, 4934, 5373, 6159, 7097,7978,8958,9875)))
predictions
# work out actual growth rate
#1 - define function
rater <- function(today_deaths, yesterday_deaths) {1+(today_deaths-yesterday_deaths)/yesterday_deaths}
test <- rater(579, 463)
test
predictions <- predictions %>% rename(deaths='Actual Deaths')
predictions <- predictions %>% mutate(new_deaths=c(deaths[1], diff(deaths)))
#predictions <- predictions %>% mutate(yesterday=c(deaths[1], diff(deaths)))
predictions <- predictions %>% mutate(rate=1+new_deaths/lag(deaths))
predictions <- predictions %>% mutate(rate=format(rate, digits = 2))
#predictions <- predictions %>% mutate(rate=c(1+new_deaths[1]/deaths))
predictions <- predictions %>% mutate(new_deaths=replace(as.numeric(new_deaths), date=="2020-03-27", NA))
predictions
library(lubridate)
#average growth rate (cumulative, from 2020-03-28 to most recent stats)
predictions <- predictions %>% mutate(rate=as.numeric(rate))
excludes_first_row <- predictions %>% filter(date!="2020-03-27")
cumulative <- excludes_first_row %>% filter(date < today())
cumulative_mean_growth_rate <- cumulative %>% summarize(mean(rate))
str_glue("Cumulative mean growth rate starting 28th March: {cumulative_mean_growth_rate}")
# cumulative growth rate to 05/04/2020 (i.e. measured on 06/04) = 1.24444444444444
# cumulative growth rate to 06/04/2020 = 1.23
# cumulative growth rate to 07/04/2020 = 1.21818181818182
# cumulative growth rate to 08/04/2020 = 1.20833333333333
# cumulative growth rate to 09/04/2020 = 1.20769230769231
# cumulative growth rate to 10/04/2020 = 1.2
# cumulative growth rate to 11/04/2020 = 1.19333333333333
# cumulative growth rate to 12/04/2020 =
#average growth rate (last five days) I'd like to automate this, but for now I will make a new variable every day
#over time, I expect to see the mean for the last five days fall.
last_five_days <- cumulative %>% filter(date >"2020-03-28")
#last_five_days
last_five_days_mean_growth_rate <- last_five_days %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (28th March-2nd April): {last_five_days_mean_growth_rate}")
five_days_to_third_april <- last_five_days %>% filter(date > "2020-03-29")
five_days_to_third_april_mean_growth_rate <- five_days_to_third_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (29th March-3rd April): {five_days_to_third_april_mean_growth_rate}")
five_days_to_fourth_april <- last_five_days %>% filter(date > "2020-03-30")
five_days_to_fourth_april_mean_growth_rate <- five_days_to_fourth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (30th March-4th April): {five_days_to_fourth_april_mean_growth_rate}")
five_days_to_fifth_april <- last_five_days %>% filter(date > "2020-03-31")
five_days_to_fifth_april_mean_growth_rate <- five_days_to_fifth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (31st March-5th April): {five_days_to_fifth_april_mean_growth_rate}")
five_days_to_sixth_april <- last_five_days %>% filter(date > "2020-04-01")
five_days_to_sixth_april_mean_growth_rate <- five_days_to_sixth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (1st-6th April): {five_days_to_sixth_april_mean_growth_rate}")
five_days_to_seventh_april <- last_five_days %>% filter(date > "2020-04-02")
five_days_to_seventh_april_mean_growth_rate <- five_days_to_seventh_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (2nd-7th April): {five_days_to_seventh_april_mean_growth_rate}")
five_days_to_eighth_april <- last_five_days %>% filter(date > "2020-04-03")
five_days_to_eighth_april_mean_growth_rate <- five_days_to_eighth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (3rd-8th April): {five_days_to_eighth_april_mean_growth_rate}")
five_days_to_ninth_april <- last_five_days %>% filter(date > "2020-04-04")
five_days_to_ninth_april_mean_growth_rate <- five_days_to_ninth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (4th-9th April): {five_days_to_ninth_april_mean_growth_rate}")
five_days_to_tenth_april <- last_five_days %>% filter(date > "2020-04-05")
five_days_to_tenth_april_mean_growth_rate <- five_days_to_tenth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (5th-10th April): {five_days_to_tenth_april_mean_growth_rate}")
five_days_to_eleventh_april <- last_five_days %>% filter(date > "2020-04-06")
five_days_to_eleventh_april_mean_growth_rate <- five_days_to_eleventh_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (6th-11th April): {five_days_to_eleventh_april_mean_growth_rate}")
five_days_to_twelfth_april <- last_five_days %>% filter(date > "2020-04-07")
five_days_to_twelth_april_mean_growth_rate <- five_days_to_twelfth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (7th-12th April): {five_days_to_twelfth_april_mean_growth_rate}")
library(stringr)
library(readr)
library(dplyr)
#new_deaths=c(uk_deaths[1], diff(uk_deaths))
#mutate(daily_deaths_percent=c((new_deaths[1]/cumulative_deaths)*100))
predictor <- function(start_value) {
predicted_value <- start_value * 1.25}
#starting figure (this is known)
twenty_six_march <- 463
twenty_seven_march <- predictor(twenty_six_march)
twenty_eight_march <- predictor(twenty_seven_march)
twenty_nine_march <- predictor(twenty_eight_march)
thirty_march <- predictor(twenty_nine_march)
thirty_one_march <- predictor(thirty_march)
one_april <- predictor(thirty_one_march)
two_april <- predictor(one_april)
three_april <- predictor(two_april)
four_april <- predictor(three_april)
five_april <- predictor(four_april)
six_april <- predictor(five_april)
seven_april <- predictor(six_april)
eight_april <- predictor(seven_april)
nine_april <- predictor(eight_april)
ten_april <- predictor(nine_april)
eleven_april <- predictor(ten_april)
twelve_april <- predictor(eleven_april)
#
date <- as.Date(c('2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12"))
predicted_deaths <- c(twenty_six_march, twenty_seven_march, twenty_eight_march, twenty_nine_march, thirty_march, thirty_one_march, one_april, two_april, three_april, four_april, five_april, six_april, seven_april, eight_april, nine_april, ten_april, eleven_april, twelve_april)
predictions <- data.frame(date, predicted_deaths)
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
#predictions <- predictions %>% mutate(predicted_deaths=c(predicted_deaths[1]*1.25*predicted_deaths))
#predictions <- predictions %>% mutate(predicted_deaths=replace(as.numeric(predicted_deaths), date=="2020-03-27", 578))
predictions <- predictions %>% mutate(predicted_deaths=format(predicted_deaths, digits=2))
predictions <- predictions %>% mutate(predicted_deaths=as.numeric(predicted_deaths))
predictions <- predictions %>% mutate(predicted_deaths_third=1.3*(predicted_deaths/1.25))
predictions <- predictions %>% mutate(predicted_deaths_fast=1.5*(predicted_deaths/1.25))
predictions <- predictions %>% rename('Predicted Deaths (25%)'=predicted_deaths, 'Predicted Deaths (30%)'=predicted_deaths_third, 'Predicted Deaths (50%)'=predicted_deaths_fast)
predictions
#add actual number
empty <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
predictions <- predictions %>% mutate('Actual Deaths'=empty)
predictions
# 26th isn't a prediction - it's known. So, delete this row
predictions <- predictions %>% filter(date!="2020-03-26")
#add data to actual deaths
predictions <- predictions %>% mutate('Actual Deaths'=replace(as.numeric('Actual Deaths'), date==c("2020-03-27", "2020-03-28", "2020-03-29", "2020-03-30", "2020-03-31", "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11","2020-04-12"), c(578, 759, 1019, 1228, 1408, 1789, 2532, 2921, 3606, 4303, 4934, 5373, 6159, 7097,7978,8958,9875)))
predictions
# work out actual growth rate
#1 - define function
rater <- function(today_deaths, yesterday_deaths) {1+(today_deaths-yesterday_deaths)/yesterday_deaths}
test <- rater(579, 463)
test
predictions <- predictions %>% rename(deaths='Actual Deaths')
predictions <- predictions %>% mutate(new_deaths=c(deaths[1], diff(deaths)))
#predictions <- predictions %>% mutate(yesterday=c(deaths[1], diff(deaths)))
predictions <- predictions %>% mutate(rate=1+new_deaths/lag(deaths))
predictions <- predictions %>% mutate(rate=format(rate, digits = 2))
#predictions <- predictions %>% mutate(rate=c(1+new_deaths[1]/deaths))
predictions <- predictions %>% mutate(new_deaths=replace(as.numeric(new_deaths), date=="2020-03-27", NA))
predictions
library(lubridate)
#average growth rate (cumulative, from 2020-03-28 to most recent stats)
predictions <- predictions %>% mutate(rate=as.numeric(rate))
excludes_first_row <- predictions %>% filter(date!="2020-03-27")
cumulative <- excludes_first_row %>% filter(date < today())
cumulative_mean_growth_rate <- cumulative %>% summarize(mean(rate))
str_glue("Cumulative mean growth rate starting 28th March: {cumulative_mean_growth_rate}")
# cumulative growth rate to 05/04/2020 (i.e. measured on 06/04) = 1.24444444444444
# cumulative growth rate to 06/04/2020 = 1.23
# cumulative growth rate to 07/04/2020 = 1.21818181818182
# cumulative growth rate to 08/04/2020 = 1.20833333333333
# cumulative growth rate to 09/04/2020 = 1.20769230769231
# cumulative growth rate to 10/04/2020 = 1.2
# cumulative growth rate to 11/04/2020 = 1.19333333333333
# cumulative growth rate to 12/04/2020 =
#average growth rate (last five days) I'd like to automate this, but for now I will make a new variable every day
#over time, I expect to see the mean for the last five days fall.
last_five_days <- cumulative %>% filter(date >"2020-03-28")
#last_five_days
last_five_days_mean_growth_rate <- last_five_days %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (28th March-2nd April): {last_five_days_mean_growth_rate}")
five_days_to_third_april <- last_five_days %>% filter(date > "2020-03-29")
five_days_to_third_april_mean_growth_rate <- five_days_to_third_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (29th March-3rd April): {five_days_to_third_april_mean_growth_rate}")
five_days_to_fourth_april <- last_five_days %>% filter(date > "2020-03-30")
five_days_to_fourth_april_mean_growth_rate <- five_days_to_fourth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (30th March-4th April): {five_days_to_fourth_april_mean_growth_rate}")
five_days_to_fifth_april <- last_five_days %>% filter(date > "2020-03-31")
five_days_to_fifth_april_mean_growth_rate <- five_days_to_fifth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (31st March-5th April): {five_days_to_fifth_april_mean_growth_rate}")
five_days_to_sixth_april <- last_five_days %>% filter(date > "2020-04-01")
five_days_to_sixth_april_mean_growth_rate <- five_days_to_sixth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (1st-6th April): {five_days_to_sixth_april_mean_growth_rate}")
five_days_to_seventh_april <- last_five_days %>% filter(date > "2020-04-02")
five_days_to_seventh_april_mean_growth_rate <- five_days_to_seventh_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (2nd-7th April): {five_days_to_seventh_april_mean_growth_rate}")
five_days_to_eighth_april <- last_five_days %>% filter(date > "2020-04-03")
five_days_to_eighth_april_mean_growth_rate <- five_days_to_eighth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (3rd-8th April): {five_days_to_eighth_april_mean_growth_rate}")
five_days_to_ninth_april <- last_five_days %>% filter(date > "2020-04-04")
five_days_to_ninth_april_mean_growth_rate <- five_days_to_ninth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (4th-9th April): {five_days_to_ninth_april_mean_growth_rate}")
five_days_to_tenth_april <- last_five_days %>% filter(date > "2020-04-05")
five_days_to_tenth_april_mean_growth_rate <- five_days_to_tenth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (5th-10th April): {five_days_to_tenth_april_mean_growth_rate}")
five_days_to_eleventh_april <- last_five_days %>% filter(date > "2020-04-06")
five_days_to_eleventh_april_mean_growth_rate <- five_days_to_eleventh_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (6th-11th April): {five_days_to_eleventh_april_mean_growth_rate}")
five_days_to_twelfth_april <- last_five_days %>% filter(date > "2020-04-07")
five_days_to_twelfth_april_mean_growth_rate <- five_days_to_twelfth_april %>% summarize(mean(rate))
str_glue("Last five days mean growth rate (7th-12th April): {five_days_to_twelfth_april_mean_growth_rate}")
# for comparison, log the known daily growth rate
known_cases <- read.csv('covid_19_deaths.csv')
known_cases <- known_cases %>% select(-Global.Deaths)
known_cases <- known_cases %>% mutate(new_deaths=c(UK.Deaths[1], diff(UK.Deaths)))
known_cases <- known_cases %>% mutate(rate=1+new_deaths/lag(UK.Deaths))
known_cases <- known_cases %>% mutate(rate=format(rate, digits = 2))
known_cases
library(tidyr)
library(dplyr)
library(stringr)
library(readr)
library(lubridate)
deaths <- read_csv('covid_19_deaths.csv')
deaths <- deaths %>% mutate(infection_date=Date-days(28))
deaths <- deaths %>% rename(death_date=Date, deaths=`UK Deaths`)
uk_data <- deaths %>% select(-`Global Deaths`)
head(uk_data)
#add columns for various estimated death rates (1%)
uk_data <- uk_data %>% mutate(estimated_uk_cases=(deaths*100))
uk_data
# using only estimates of 1% death rate and growth rate of doubling every 3-4 days (which means quadrupling in a week)
predictor <- function(previous_value) {
predicted_value <- previous_value * 1.25
return(predicted_value)
}
# create predictions for each date
fifteenMarch <- 1.25 * 895800
sixteenMarch <- predictor(fifteenMarch)
seventeenMarch <- predictor(sixteenMarch)
eighteenMarch <- predictor(seventeenMarch)
nineteenMarch <- predictor(eighteenMarch)
twentyMarch <- predictor(nineteenMarch)
twentyOneMarch <- predictor(twentyMarch)
twentyTwoMarch <- predictor(twentyOneMarch)
twentyThreeMarch <- predictor(twentyTwoMarch)
twentyFourMarch <- predictor(twentyThreeMarch)
twentyFiveMarch <- predictor(twentyFourMarch)
twentySixMarch <- predictor(twentyFiveMarch)
twentySevenMarch <- predictor(twentySixMarch)
twentyEightMarch <- predictor(twentySevenMarch)
twentyNineMarch <- predictor(twentyEightMarch)
thirtyMarch <- predictor(twentyNineMarch)
thirtyOneMarch <- predictor(thirtyMarch)
oneApril <- predictor(thirtyOneMarch)
twoApril <- predictor(oneApril)
threeApril <- predictor(twoApril)
fourApril <- predictor(threeApril)
fiveApril <- predictor(fourApril)
sixApril <- predictor(fiveApril)
sevenApril <- predictor(sixApril)
eightApril <- predictor(sevenApril)
nineApril <- predictor(eightApril)
tenApril <- predictor(nineApril)
elevenApril <- predictor(tenApril)
twelveApril <- predictor(elevenApril)
# create vectors to populate the columns
date <- as.Date(c("2020-03-22", "2020-03-23", "2020-03-24", "2020-03-25", '2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12"))
estimated_infections_no_action <- c(twentyTwoMarch, twentyThreeMarch, twentyFourMarch, twentyFiveMarch,twentySixMarch, twentySevenMarch, twentyEightMarch, twentyNineMarch, thirtyMarch, thirtyOneMarch, oneApril, twoApril, threeApril, fourApril, fiveApril, sixApril, sevenApril, eightApril, nineApril, tenApril, elevenApril, twelveApril)
# create the data frame
predicted_infections <- data.frame(date, estimated_infections_no_action)
# tidy the estimated_infections column
#predicted_infections <- predicted_infections %>% mutate(estimated_infections=format(estimated_infections, big.mark = ","))
# inspect the data frame
predicted_infections
# create a function that uses a growth rate of 1.125 - half of the 25%. This is the estimate for the not-yet-lockdown that existed up to 23rd March. So, the estimate assumes that the social distancing measures reduced the infection rate by a half.
half_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.125
return(predicted_value)
}
# create a function that uses a growth rate of 1.0625 - quarter of the 25%. This is the estimated impact of the lockdown implemented by the UK government on 23rd March (but since the lockdown was announced in the evening, and it would take a full day for its effects to be felt in statistics, I will assume that its effects began on 25th March).
lockdown_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.0625
return(predicted_value)
}
# create predictions for each date
l_twentyTwoMarch <- 1.125 * twentyOneMarch
l_twentyThreeMarch <- half_predictor(l_twentyTwoMarch)
l_twentyFourMarch <- half_predictor(l_twentyThreeMarch)
l_twentyFiveMarch <- lockdown_predictor(l_twentyFourMarch)
l_twentySixMarch <- lockdown_predictor(l_twentyFiveMarch)
l_twentySevenMarch <- lockdown_predictor(l_twentySixMarch)
l_twentyEightMarch <- lockdown_predictor(l_twentySevenMarch)
l_twentyNineMarch <- lockdown_predictor(l_twentyEightMarch)
l_thirtyMarch <- lockdown_predictor(l_twentyNineMarch)
l_thirtyOneMarch <- lockdown_predictor(l_thirtyMarch)
l_oneApril <- lockdown_predictor(l_thirtyOneMarch)
l_twoApril <- lockdown_predictor(l_oneApril)
l_threeApril <- lockdown_predictor(l_twoApril)
l_fourApril <- lockdown_predictor(l_threeApril)
l_fiveApril <- lockdown_predictor(l_fourApril)
l_sixApril <- lockdown_predictor(l_fiveApril)
l_sevenApril <- lockdown_predictor(l_sixApril)
l_eightApril <- lockdown_predictor(l_sevenApril)
l_nineApril <- lockdown_predictor(l_eightApril)
l_tenApril <- lockdown_predictor(l_nineApril)
l_elevenApril <- lockdown_predictor(l_tenApril)
l_twelveApril <- lockdown_predictor(l_elevenApril)
# create vectors to populate the columns
date <- as.Date(c("2020-03-22", "2020-03-23", "2020-03-24", "2020-03-25", '2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12"))
estimated_infections_lockdown <- c(l_twentyTwoMarch, l_twentyThreeMarch, l_twentyFourMarch, l_twentyFiveMarch, l_twentySixMarch, l_twentySevenMarch, l_twentyEightMarch, l_twentyNineMarch, l_thirtyMarch, l_thirtyOneMarch, l_oneApril, l_twoApril, l_threeApril, l_fourApril, l_fiveApril, l_sixApril, l_sevenApril, l_eightApril, l_nineApril, l_tenApril, l_elevenApril, l_twelveApril)
# create the data frame
lockdown_infection_rates <- data.frame(date, estimated_infections_lockdown)
# tidy the estimated_infections column
#lockdown_infection_rates <- lockdown_infection_rates %>% mutate(estimated_infections_lockdown=format(estimated_infections_lockdown, scientific = FALSE))
# inspect the data frame
lockdown_infection_rates
compared_infections <- predicted_infections %>% bind_cols(estimated_infections_lockdown=lockdown_infection_rates$estimated_infections_lockdown)
compared_infections
#compared_infections <- compared_infections %>% mutate(estimated_infections=format(estimated_infections, big.mark = ","))
#compared_infections <- compared_infections %>% mutate(estimated_infections_lockdown=as.numeric(estimated_infections_lockdown))
#compared_infections <- compared_infections %>% mutate(estimated_infections_lockdown=format(estimated_infections_lockdown, big.mark = ","))
compared_infections
# first, put the columns back to numeric format
#compared_infections_and_deaths <- compared_infections %>% mutate(estimated_infections=as.numeric(estimated_infections))
compared_infections_and_deaths <- compared_infections %>% mutate(estimated_deaths_no_action=0.01*estimated_infections_no_action)
compared_infections_and_deaths <- compared_infections_and_deaths %>% mutate(estimated_deaths_lockdown=0.01*estimated_infections_lockdown)
compared_infections_and_deaths
compared_infections_and_deaths_dates <- compared_infections_and_deaths %>% mutate(death_date_14_days=as.Date(date + days(14)))
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(death_date_28_days=as.Date(date + days(28)))
# add a column to review the results on a daily basis.
assess <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment = assess)
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment=replace(fourteen_day_assessment, death_date_14_days==c("2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11"), c("As of 2020-04-05, the actual death toll was 4313", "As of 2020-04-06, the actual death toll was 4934", "As of 2020-04-07, the actual death toll was 5373", "As of 2020-04-08, the actual death toll was 6159", "As of 2020-04-09, the actual death toll was 7097", "As of 2020-04-10, the actual death toll was 7978","As of 2020-04-11, the actual death toll was 8958")))
#reorder the columns
new_order <- c("date", "estimated_infections_no_action", "estimated_infections_lockdown", "estimated_deaths_no_action",  "estimated_deaths_lockdown", "death_date_14_days", "fourteen_day_assessment", "death_date_28_days")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates[, new_order]
#names <- colnames(compared_infections_and_deaths_dates)
#names
compared_infections_and_deaths_dates
library(ggplot2)
library(scales)
infectionsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=date)) + geom_line(aes(y=estimated_infections_no_action), col = "steelblue") + geom_line(aes(y=estimated_infections_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-13"), y = 50000000, label="No action")) + geom_text(x=as.Date("2020-04-13"), y = 5000000, label="Lockdown") + labs(title="Predicted infections (lockdown versus no action)", x='Date', y='Predicted Infections') + theme_classic()
infectionsComparisonLine
deathsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=death_date_7_days)) + geom_line(aes(y=estimated_deaths_no_action), col = "steelblue") + geom_line(aes(y=estimated_deaths_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-21"), y = 500000, label="No action")) + geom_text(x=as.Date("2020-04-21"), y = 50000, label="Lockdown") + labs(title="Predicted Deaths (lockdown versus no action)", subtitle="estimates that it takes 3 weeks for measures to impact deaths", x='Date', y='Predicted Deaths') + theme_classic()
deathsComparisonLine
library(tidyr)
library(dplyr)
library(stringr)
library(readr)
library(lubridate)
deaths <- read_csv('covid_19_deaths.csv')
deaths <- deaths %>% mutate(infection_date=Date-days(14))
deaths <- deaths %>% rename(death_date=Date, deaths=`UK Deaths`)
uk_data <- deaths %>% select(-`Global Deaths`)
head(uk_data)
#add columns for various estimated death rates (0.1%, 0.5%, 1%, 2%, 3%)
uk_data <- uk_data %>% mutate(estimated_uk_cases_tenth=(deaths*1000))
uk_data <- uk_data %>% mutate(estimated_uk_cases_one=(deaths*100))
uk_data <- uk_data %>% mutate(estimated_uk_cases_two=(deaths*50))
uk_data
# order should be two, one, tenth (as this shows the min-max range better)
# using only estimates of 1% death rate and growth rate of doubling every 3-4 days (which means quadrupling in a week)
predictor <- function(previous_value) {
predicted_value <- previous_value * 1.25
return(predicted_value)
}
# create predictions for each date
twentyTwoMarch <- 1.25 * 360500
twentyThreeMarch <- predictor(twentyTwoMarch)
twentyFourMarch <- predictor(twentyThreeMarch)
twentyFiveMarch <- predictor(twentyFourMarch)
twentySixMarch <- predictor(twentyFiveMarch)
twentySevenMarch <- predictor(twentySixMarch)
twentyEightMarch <- predictor(twentySevenMarch)
twentyNineMarch <- predictor(twentyEightMarch)
thirtyMarch <- predictor(twentyNineMarch)
thirtyOneMarch <- predictor(thirtyMarch)
oneApril <- predictor(thirtyOneMarch)
twoApril <- predictor(oneApril)
threeApril <- predictor(twoApril)
fourApril <- predictor(threeApril)
fiveApril <- predictor(fourApril)
sixApril <- predictor(fiveApril)
sevenApril <- predictor(sixApril)
eightApril <- predictor(sevenApril)
nineApril <- predictor(eightApril)
tenApril <- predictor(nineApril)
elevenApril <- predictor(tenApril)
twelveApril <- predictor(elevenApril)
# create vectors to populate the columns
date <- as.Date(c("2020-03-22", "2020-03-23", "2020-03-24", "2020-03-25", '2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12"))
estimated_infections_no_action <- c(twentyTwoMarch, twentyThreeMarch, twentyFourMarch, twentyFiveMarch,twentySixMarch, twentySevenMarch, twentyEightMarch, twentyNineMarch, thirtyMarch, thirtyOneMarch, oneApril, twoApril, threeApril, fourApril, fiveApril, sixApril, sevenApril, eightApril, nineApril, tenApril, elevenApril, twelveApril)
# create the data frame
predicted_infections <- data.frame(date, estimated_infections_no_action)
# tidy the estimated_infections column
#predicted_infections <- predicted_infections %>% mutate(estimated_infections=format(estimated_infections, big.mark = ","))
# inspect the data frame
predicted_infections
# create a function that uses a growth rate of 1.125 - half of the 25%. This is the estimate for the not-yet-lockdown that existed up to 23rd March. So, the estimate assumes that the social distancing measures reduced the infection rate by a half.
half_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.125
return(predicted_value)
}
# create a function that uses a growth rate of 1.0625 - quarter of the 25%. This is the estimated impact of the lockdown implemented by the UK government on 23rd March (but since the lockdown was announced in the evening, and it would take a full day for its effects to be felt in statistics, I will assume that its effects began on 25th March).
lockdown_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.0625
return(predicted_value)
}
# create predictions for each date
twentyTwoMarch <- 1.125 * 360500
twentyThreeMarch <- half_predictor(twentyTwoMarch)
twentyFourMarch <- half_predictor(twentyThreeMarch)
twentyFiveMarch <- lockdown_predictor(twentyFourMarch)
twentySixMarch <- lockdown_predictor(twentyFiveMarch)
twentySevenMarch <- lockdown_predictor(twentySixMarch)
twentyEightMarch <- lockdown_predictor(twentySevenMarch)
twentyNineMarch <- lockdown_predictor(twentyEightMarch)
thirtyMarch <- lockdown_predictor(twentyNineMarch)
thirtyOneMarch <- lockdown_predictor(thirtyMarch)
oneApril <- lockdown_predictor(thirtyOneMarch)
twoApril <- lockdown_predictor(oneApril)
threeApril <- lockdown_predictor(twoApril)
fourApril <- lockdown_predictor(threeApril)
fiveApril <- lockdown_predictor(fourApril)
sixApril <- lockdown_predictor(fiveApril)
sevenApril <- lockdown_predictor(sixApril)
eightApril <- lockdown_predictor(sevenApril)
nineApril <- lockdown_predictor(eightApril)
tenApril <- lockdown_predictor(nineApril)
elevenApril <- lockdown_predictor(tenApril)
twelveApril <- lockdown_predictor(elevenApril)
# create vectors to populate the columns
date <- as.Date(c("2020-03-22", "2020-03-23", "2020-03-24", "2020-03-25", '2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12"))
estimated_infections_lockdown <- c(twentyTwoMarch, twentyThreeMarch, twentyFourMarch, twentyFiveMarch,twentySixMarch, twentySevenMarch, twentyEightMarch, twentyNineMarch, thirtyMarch, thirtyOneMarch, oneApril, twoApril, threeApril, fourApril, fiveApril, sixApril, sevenApril, eightApril, nineApril, tenApril, elevenApril, twelveApril)
# create the data frame
lockdown_infection_rates <- data.frame(date, estimated_infections_lockdown)
# tidy the estimated_infections column
#lockdown_infection_rates <- lockdown_infection_rates %>% mutate(estimated_infections_lockdown=format(estimated_infections_lockdown, scientific = FALSE))
# inspect the data frame
lockdown_infection_rates
compared_infections <- predicted_infections %>% bind_cols(estimated_infections_lockdown=lockdown_infection_rates$estimated_infections_lockdown)
compared_infections
#compared_infections <- compared_infections %>% mutate(estimated_infections=format(estimated_infections, big.mark = ","))
#compared_infections <- compared_infections %>% mutate(estimated_infections_lockdown=as.numeric(estimated_infections_lockdown))
#compared_infections <- compared_infections %>% mutate(estimated_infections_lockdown=format(estimated_infections_lockdown, big.mark = ","))
compared_infections
# first, put the columns back to numeric format
#compared_infections_and_deaths <- compared_infections %>% mutate(estimated_infections=as.numeric(estimated_infections))
compared_infections_and_deaths <- compared_infections %>% mutate(estimated_deaths_no_action=0.01*estimated_infections_no_action)
compared_infections_and_deaths <- compared_infections_and_deaths %>% mutate(estimated_deaths_lockdown=0.01*estimated_infections_lockdown)
compared_infections_and_deaths
compared_infections_and_deaths_dates <- compared_infections_and_deaths %>% mutate(death_date_14_days=as.Date(date + days(14)))
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(death_date_7_days=as.Date(date + days(7)))
# add a column to review the results on a daily basis.
assess <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment = assess)
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment=replace(fourteen_day_assessment, death_date_14_days==c("2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12"), c("As of 2020-04-05, the actual death toll was 4313", "As of 2020-04-06, the actual death toll was 4934", "As of 2020-04-07, the actual death toll was 5373", "As of 2020-04-08, the actual death toll was 6159", "As of 2020-04-09, the actual death toll was 7097", "As of 2020-04-10, the actual death toll was 7978","As of 2020-04-11, the actual death toll was 8958","As of 2020-04-12, the actual death toll was 9875")))
#reorder the columns
new_order <- c("date", "estimated_infections_no_action", "estimated_infections_lockdown", "estimated_deaths_no_action",  "estimated_deaths_lockdown", "death_date_14_days", "fourteen_day_assessment", "death_date_7_days")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates[, new_order]
#names <- colnames(compared_infections_and_deaths_dates)
#names
compared_infections_and_deaths_dates
library(ggplot2)
library(scales)
infectionsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=date)) + geom_line(aes(y=estimated_infections_no_action), col = "steelblue") + geom_line(aes(y=estimated_infections_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-13"), y = 50000000, label="No action")) + geom_text(x=as.Date("2020-04-13"), y = 5000000, label="Lockdown") + labs(title="Predicted infections (lockdown versus no action)", x='Date', y='Predicted Infections') + theme_classic()
infectionsComparisonLine
deathsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=death_date_7_days)) + geom_line(aes(y=estimated_deaths_no_action), col = "steelblue") + geom_line(aes(y=estimated_deaths_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-21"), y = 500000, label="No action")) + geom_text(x=as.Date("2020-04-21"), y = 50000, label="Lockdown") + labs(title="Predicted Deaths (lockdown versus no action)", subtitle="estimates that it takes 3 weeks for measures to impact deaths", x='Date', y='Predicted Deaths') + theme_classic()
deathsComparisonLine
deathsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=death_date_14_days)) + geom_line(aes(y=estimated_deaths_no_action), col = "steelblue") + geom_line(aes(y=estimated_deaths_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-28"), y = 500000, label="No action")) + geom_text(x=as.Date("2020-04-28"), y = 50000, label="Lockdown") + labs(title="Predicted Deaths (lockdown versus no action)", subtitle="estimates that it takes 2 weeks for measures to impact deaths", x='Date', y='Predicted Deaths') + theme_classic()
deathsComparisonLine
