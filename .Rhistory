freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
str_glue("In {country}, {freq} people in every thousand will die of the virus.")
}
return()
}
bob <- all_frequencies()
print(bob)
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
all_frequencies <- function() {
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
str_glue("In {country}, {freq} people in every thousand will die of the virus.")
}
return()
}
bob <- all_frequencies()
print(bob)
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
all_frequencies <- function() {
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
str_glue("In {country}, {freq} people in every thousand will die of the virus.")
}
return()
}
bob <- all_frequencies()
print(bob)
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
all_frequencies <- function() {
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand will die of the virus.")
return(speech)}
}
bob <- all_frequencies()
print(bob)
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
all_frequencies <- function() {
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand will die of the virus.")
print(speech)}
}
bob <- all_frequencies()
#print(bob)
bob
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
all_frequencies <- function() {
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand will die of the virus.")
print(speech)}
return()
}
bob <- all_frequencies()
#print(bob)
bob
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
all_frequencies <- function() {
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
print(speech)}
return()
}
bob <- all_frequencies()
#print(bob)
bob
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
#all_frequencies <- function() {
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
#print(speech)}
#  return()
#}
#bob <- all_frequencies()
#bob
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
print(speech)}
# so, this function works, but it adds an unwanted NULL line.
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
#all_frequencies <- function() {
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
#print(speech)}
#  return()
#}
#bob <- all_frequencies()
#bob
# so, this function works, but it adds an unwanted NULL line. I'll try it without the wrapper function.
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
print(speech)}
# add risk of death (%)
results_by_deaths <- results_by_tests %>% mutate(death_risk=(deaths/population)*100)
results_by_deaths <- results_by_deaths %>% mutate(death_risk=format(death_risk, digits=2, scientific=FALSE))
results_by_deaths <- results_by_deaths %>% arrange(desc(death_risk))
results_by_deaths <- results_by_deaths %>% mutate(death_risk=as.numeric(death_risk))
results_by_deaths
# I learned how to format a number with scientific=FALSE - this trnasformed a number 9.0e-04 into something I can understand (0.015136)
gdp_to_death_risk <- ggplot(results_by_deaths,aes(x=gdp_per_capita)) + geom_point(aes(y=death_risk)) +  scale_y_continuous(labels=label_comma()) + labs(title="Plotting GDP per Capita and the Risk of Death", x="GDP per Capita", y="Risk of death (%)")
gdp_to_death_risk
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
#all_frequencies <- function() {
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
#print(speech)}
#  return()
#}
#bob <- all_frequencies()
#bob
# so, this function works, but it adds an unwanted NULL line. I'll try it without the wrapper function.
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
print(speech)}
#There's still a problem with the results for Czech Republic, Estonia, Croatia, Poland and Bulgaria.
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
#all_frequencies <- function() {
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
#print(speech)}
#  return()
#}
#bob <- all_frequencies()
#bob
# so, this function works, but it adds an unwanted NULL line. I'll try it without the wrapper function.
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
print(speech)}
#There's still a problem with the results for Czech Republic, Estonia, Croatia, Poland and Bulgaria.
library(dplyr)
library(readr)
library(stringr)
pop_and_gdp <-read_csv('european_pop_gdp_per_capita.csv')
pop_and_gdp
covid_deaths <- read_csv('european_covid_deaths_2020_28_mar.csv')
covid_deaths
covid_tests <- read_csv('european_covid_tests_2020_29_mar.csv')
covid_tests
master <- pop_and_gdp %>% bind_cols(covid_deaths) %>% bind_cols(covid_tests)
master <- master %>% select(-Country1,-X11,-Country2,-X12)
master
sort_by_deaths <- master %>% arrange(desc(deaths))
sort_by_deaths
library(ggplot2)
library(scales)
change_ireland <- master %>% mutate(tests=replace(as.numeric(tests), X1==c(15), c(17992)))
change_spain <- change_ireland %>% mutate(tests=replace(as.numeric(tests), X1==c(27), c(355000)))
change_sweden <- change_spain %>% mutate(tests=replace(as.numeric(tests), X1==c(28), c(24500)))
numerics <- change_sweden %>% filter(tests!="not known")
numerics
#gdp_to_tests <- ggplot(master, aes(x=gdp_per_capita, y=tests)) + geom_line()
#gdp_to_tests
gdp_to_tests <- ggplot(numerics,aes(x=gdp_per_capita)) + geom_point(aes(y=tests)) +  scale_y_continuous(labels=label_comma()) + labs(title="Plotting GDP per Capita and Number of Tests", x="GDP per Capita", y="Number of Tests")
gdp_to_tests
tests_deaths <- ggplot(numerics,aes(x=tests)) + geom_point(aes(y=deaths)) + scale_x_continuous(labels=label_comma()) + labs(title="Plotting Number of Tests and Number of Deaths", x="Number of Tests", y="Number of Deaths")
tests_deaths
gdp_to_deaths <- ggplot(numerics,aes(x=gdp_per_capita)) + geom_point(aes(y=deaths)) +  scale_y_continuous(labels=label_comma()) + labs(title="Plotting GDP per Capita and Number of Deaths", x="GDP per Capita", y="Number of Deaths")
gdp_to_deaths
# add percent_tested
# This is the percentage of the population that has been tested.
#master <- master %>% mutate(tests=as.numeric(tests))
results_by_tests <- numerics %>% mutate(percent_tested=(tests/population)*100)
results_by_tests <- results_by_tests %>% mutate(percent_tested=format(percent_tested, digits=1))
results_by_tests <- results_by_tests %>% arrange(desc(percent_tested))
results_by_tests <- results_by_tests %>% mutate(percent_tested=as.numeric(percent_tested))
results_by_tests
gdp_to_tests_per_capita <- ggplot(results_by_tests,aes(x=gdp_per_capita)) + geom_point(aes(y=percent_tested)) +  scale_y_continuous(labels=label_comma()) + labs(title="Plotting GDP per Capita and Percentage of People Tested", x="GDP per Capita", y="Percentage of population tested")
gdp_to_tests_per_capita
# add risk of death (%)
results_by_deaths <- results_by_tests %>% mutate(death_risk=(deaths/population)*100)
results_by_deaths <- results_by_deaths %>% mutate(death_risk=format(death_risk, digits=1, scientific=FALSE))
results_by_deaths <- results_by_deaths %>% arrange(desc(death_risk))
results_by_deaths <- results_by_deaths %>% mutate(death_risk=as.numeric(death_risk))
results_by_deaths
# I learned how to format a number with scientific=FALSE - this trnasformed a number 9.0e-04 into something I can understand (0.015136)
gdp_to_death_risk <- ggplot(results_by_deaths,aes(x=gdp_per_capita)) + geom_point(aes(y=death_risk)) +  scale_y_continuous(labels=label_comma()) + labs(title="Plotting GDP per Capita and the Risk of Death", x="GDP per Capita", y="Risk of death (%)")
gdp_to_death_risk
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
#all_frequencies <- function() {
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
#print(speech)}
#  return()
#}
#bob <- all_frequencies()
#bob
# so, this function works, but it adds an unwanted NULL line. I'll try it without the wrapper function.
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
print(speech)}
# add risk of death (%)
results_by_deaths <- results_by_tests %>% mutate(death_risk=(deaths/population)*100)
results_by_deaths <- results_by_deaths %>% mutate(death_risk=format(death_risk, digits=2, scientific=FALSE))
results_by_deaths <- results_by_deaths %>% arrange(desc(death_risk))
results_by_deaths <- results_by_deaths %>% mutate(death_risk=as.numeric(death_risk))
results_by_deaths
# I learned how to format a number with scientific=FALSE - this trnasformed a number 9.0e-04 into something I can understand (0.015136)
# Work out the natural frequency in a thousand. E.g. 3 people in every thousand will get a test.
# define the function
frequency_in_a_thousand <- function(risk) {(risk/100)*1000}
# plug in some numbers
#all_frequencies <- function() {
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
#print(speech)}
#  return()
#}
#bob <- all_frequencies()
#bob
# so, this function works, but it adds an unwanted NULL line. I'll try it without the wrapper function.
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency_in_a_thousand(results_by_deaths[row, "death_risk"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, {freq} people in every thousand have died of the virus.")
print(speech)}
#Note a problem with the frequency of Czech Republic, Croatia, Poland and Bulgaria. The format is "8e-04". To fix this
frequency <- function(risk, population) {
risk * population
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "death_risk"], results_by_deaths[row, "population"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(risk, population) {
population/risk
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "death_risk"], results_by_deaths[row, "population"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(risk, population) {
risk * population
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "death_risk"], results_by_deaths[row, "population"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, digits=0)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, digits=0, nsmall=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- comma_format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
population/deaths
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
comma_format(population/deaths, digits=2)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(comma_format(population/deaths, digits=2))
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(comma_format(population/deaths, digits=2))
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(comma_format(population/deaths, digits=2))
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- comma_format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freqy <- comma_format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freqy} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freqy <- comma_format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freqy} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, digits=2)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
#freq <- format(freq, digits=2)
freq <- format(freq, big.mark = ",", scientific = FALSE)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
for (row in 1:nrow(results_by_deaths)) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
#freq <- format(freq, digits=2)
freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
frequency <- function(population, deaths) {
return(population/deaths)
}
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
#freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
#print(speech)}
for (row in 1:nrow(results_by_deaths)) {
if (deaths > 0) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
}
frequency <- function(population, deaths) {
return(population/deaths)
}
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
#freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
#print(speech)}
for (row in 1:nrow(results_by_deaths)) {
if (results_by_deaths[row, "deaths"] > 0) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
country <- results_by_deaths[row, "Country"]
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
}
# I learned how to format the numbers with commas, using big.mark
# Note that the for loop doesn't work for countries with zero deaths. It says that 1 person in Inf has died. Solution
frequency <- function(population, deaths) {
return(population/deaths)
}
#for (row in 1:nrow(results_by_deaths)) {
#freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
#freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
#country <- results_by_deaths[row, "Country"]
#speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
#print(speech)}
# Note that the for loop doesn't work for countries with zero deaths. It says that 1 person in Inf has died. Solution is to add an if statement to exclude
for (row in 1:nrow(results_by_deaths)) {
country <- results_by_deaths[row, "Country"]
if (results_by_deaths[row, "deaths"] > 0) {
freq <- frequency(results_by_deaths[row, "population"], results_by_deaths[row, "deaths"])
freq <- format(freq, big.mark = ",", digits=0, scientific = FALSE)
speech <- str_glue("In {country}, 1 person in  {freq} has died of the virus.")
print(speech)}
else {
nil_speech <- str_glue("No one has died in {country} yet, so no frequency can be determined.")
print(nil_speech)
}
}
# I learned how to format the numbers with commas, using big.mark
