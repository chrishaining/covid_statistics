date <- as.Date(c("2020-03-22", "2020-03-23", "2020-03-24", "2020-03-25", '2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-15", "2020-04-16", "2020-04-17", "2020-04-18", "2020-04-19", "2020-04-20", "2020-04-21", "2020-04-22", "2020-04-23"))
estimated_infections_no_action <- c(twentyTwoMarch, twentyThreeMarch, twentyFourMarch, twentyFiveMarch,twentySixMarch, twentySevenMarch, twentyEightMarch, twentyNineMarch, thirtyMarch, thirtyOneMarch, oneApril, twoApril, threeApril, fourApril, fiveApril, sixApril, sevenApril, eightApril, nineApril, tenApril, elevenApril, twelveApril, thirteenApril, fourteenApril, fifteenApril, sixteenApril, seventeenApril, eighteenApril, nineteenApril, twentyApril, twentyoneApril, twentytwoApril, twentythreeApril)
# create the data frame
predicted_infections <- data.frame(date, estimated_infections_no_action)
# tidy the estimated_infections column
#predicted_infections <- predicted_infections %>% mutate(estimated_infections=format(estimated_infections, big.mark = ","))
# inspect the data frame
predicted_infections
# create a function that uses a growth rate of 1.125 - half of the 25%. This is the estimate for the not-yet-lockdown that existed up to 23rd March. So, the estimate assumes that the social distancing measures reduced the infection rate by a half.
half_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.125
return(predicted_value)
}
# create a function that uses a growth rate of 1.0625 - quarter of the 25%. This is the estimated impact of the lockdown implemented by the UK government on 23rd March (but since the lockdown was announced in the evening, and it would take a full day for its effects to be felt in statistics, I will assume that its effects began on 25th March).
lockdown_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.0625
return(predicted_value)
}
# create predictions for each date
twentyTwoMarch <- 1.125 * 360500
twentyThreeMarch <- half_predictor(twentyTwoMarch)
twentyFourMarch <- half_predictor(twentyThreeMarch)
twentyFiveMarch <- lockdown_predictor(twentyFourMarch)
twentySixMarch <- lockdown_predictor(twentyFiveMarch)
twentySevenMarch <- lockdown_predictor(twentySixMarch)
twentyEightMarch <- lockdown_predictor(twentySevenMarch)
twentyNineMarch <- lockdown_predictor(twentyEightMarch)
thirtyMarch <- lockdown_predictor(twentyNineMarch)
thirtyOneMarch <- lockdown_predictor(thirtyMarch)
oneApril <- lockdown_predictor(thirtyOneMarch)
twoApril <- lockdown_predictor(oneApril)
threeApril <- lockdown_predictor(twoApril)
fourApril <- lockdown_predictor(threeApril)
fiveApril <- lockdown_predictor(fourApril)
sixApril <- lockdown_predictor(fiveApril)
sevenApril <- lockdown_predictor(sixApril)
eightApril <- lockdown_predictor(sevenApril)
nineApril <- lockdown_predictor(eightApril)
tenApril <- lockdown_predictor(nineApril)
elevenApril <- lockdown_predictor(tenApril)
twelveApril <- lockdown_predictor(elevenApril)
thirteen_April <- lockdown_predictor(twelve_April)
# create a function that uses a growth rate of 1.125 - half of the 25%. This is the estimate for the not-yet-lockdown that existed up to 23rd March. So, the estimate assumes that the social distancing measures reduced the infection rate by a half.
half_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.125
return(predicted_value)
}
# create a function that uses a growth rate of 1.0625 - quarter of the 25%. This is the estimated impact of the lockdown implemented by the UK government on 23rd March (but since the lockdown was announced in the evening, and it would take a full day for its effects to be felt in statistics, I will assume that its effects began on 25th March).
lockdown_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.0625
return(predicted_value)
}
# create predictions for each date
twentyTwoMarch <- 1.125 * 360500
twentyThreeMarch <- half_predictor(twentyTwoMarch)
twentyFourMarch <- half_predictor(twentyThreeMarch)
twentyFiveMarch <- lockdown_predictor(twentyFourMarch)
twentySixMarch <- lockdown_predictor(twentyFiveMarch)
twentySevenMarch <- lockdown_predictor(twentySixMarch)
twentyEightMarch <- lockdown_predictor(twentySevenMarch)
twentyNineMarch <- lockdown_predictor(twentyEightMarch)
thirtyMarch <- lockdown_predictor(twentyNineMarch)
thirtyOneMarch <- lockdown_predictor(thirtyMarch)
oneApril <- lockdown_predictor(thirtyOneMarch)
twoApril <- lockdown_predictor(oneApril)
threeApril <- lockdown_predictor(twoApril)
fourApril <- lockdown_predictor(threeApril)
fiveApril <- lockdown_predictor(fourApril)
sixApril <- lockdown_predictor(fiveApril)
sevenApril <- lockdown_predictor(sixApril)
eightApril <- lockdown_predictor(sevenApril)
nineApril <- lockdown_predictor(eightApril)
tenApril <- lockdown_predictor(nineApril)
elevenApril <- lockdown_predictor(tenApril)
twelveApril <- lockdown_predictor(elevenApril)
thirteen_April <- lockdown_predictor(twelveApril)
fourteen_April <- lockdown_predictor(thirteen_April)
fifteen_April <- lockdown_predictor(fourteen_April)
sixteen_April <- lockdown_predictor(fifteen_April)
seventeen_April <- lockdown_predictor(sixteen_April)
eighteen_April <- lockdown_predictor(seventeen_April)
nineteen_April <- lockdown_predictor(eighteen_April)
twenty_April <- lockdown_predictor(nineteen_April)
twentyone_April <- lockdown_predictor(twenty_April)
twentytwo_April <- lockdown_predictor(twentyone_April)
twentythree_April <- lockdown_predictor(twentytwo_April)
# create vectors to populate the columns
date <- as.Date(c("2020-03-22", "2020-03-23", "2020-03-24", "2020-03-25", '2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-15", "2020-04-16", "2020-04-17", "2020-04-18", "2020-04-19", "2020-04-20", "2020-04-21", "2020-04-22", "2020-04-23"))
estimated_infections_lockdown <- c(twentyTwoMarch, twentyThreeMarch, twentyFourMarch, twentyFiveMarch,twentySixMarch, twentySevenMarch, twentyEightMarch, twentyNineMarch, thirtyMarch, thirtyOneMarch, oneApril, twoApril, threeApril, fourApril, fiveApril, sixApril, sevenApril, eightApril, nineApril, tenApril, elevenApril, twelveApril, thirteen_April, fourteen_April, fifteen_April, sixteen_April, seventeen_April, eighteen_April, nineteen_April, twenty_April, twentyone_April, twentytwo_April, twentythree_April)
# create the data frame
lockdown_infection_rates <- data.frame(date, estimated_infections_lockdown)
# tidy the estimated_infections column
#lockdown_infection_rates <- lockdown_infection_rates %>% mutate(estimated_infections_lockdown=format(estimated_infections_lockdown, scientific = FALSE))
# inspect the data frame
lockdown_infection_rates
library(tidyr)
library(dplyr)
library(stringr)
library(readr)
library(lubridate)
deaths <- read_csv('covid_19_deaths.csv')
deaths <- deaths %>% mutate(infection_date=Date-days(14))
deaths <- deaths %>% rename(death_date=Date, deaths=`UK Deaths`)
uk_data <- deaths %>% select(-`Global Deaths`)
head(uk_data)
#add columns for various estimated death rates (0.1%, 0.5%, 1%, 2%, 3%)
uk_data <- uk_data %>% mutate(estimated_uk_cases_tenth=(deaths*1000))
uk_data <- uk_data %>% mutate(estimated_uk_cases_one=(deaths*100))
uk_data <- uk_data %>% mutate(estimated_uk_cases_two=(deaths*50))
uk_data
# order should be two, one, tenth (as this shows the min-max range better)
# using only estimates of 1% death rate and growth rate of doubling every 3-4 days (which means quadrupling in a week)
predictor <- function(previous_value) {
predicted_value <- previous_value * 1.25
return(predicted_value)
}
# create predictions for each date
twentyTwoMarch <- 1.25 * 360500
twentyThreeMarch <- predictor(twentyTwoMarch)
twentyFourMarch <- predictor(twentyThreeMarch)
twentyFiveMarch <- predictor(twentyFourMarch)
twentySixMarch <- predictor(twentyFiveMarch)
twentySevenMarch <- predictor(twentySixMarch)
twentyEightMarch <- predictor(twentySevenMarch)
twentyNineMarch <- predictor(twentyEightMarch)
thirtyMarch <- predictor(twentyNineMarch)
thirtyOneMarch <- predictor(thirtyMarch)
oneApril <- predictor(thirtyOneMarch)
twoApril <- predictor(oneApril)
threeApril <- predictor(twoApril)
fourApril <- predictor(threeApril)
fiveApril <- predictor(fourApril)
sixApril <- predictor(fiveApril)
sevenApril <- predictor(sixApril)
eightApril <- predictor(sevenApril)
nineApril <- predictor(eightApril)
tenApril <- predictor(nineApril)
elevenApril <- predictor(tenApril)
twelveApril <- predictor(elevenApril)
thirteenApril <- predictor(twelveApril)
fourteenApril <- predictor(thirteenApril)
fifteenApril <- predictor(fourteenApril)
sixteenApril <- predictor(fifteenApril)
seventeenApril <- predictor(sixteenApril)
eighteenApril <- predictor(seventeenApril)
nineteenApril <- predictor(eighteenApril)
twentyApril <- predictor(nineteenApril)
twentyoneApril <- predictor(twentyApril)
twentytwoApril <- predictor(twentyoneApril)
twentythreeApril <- predictor(twentytwoApril)
# create vectors to populate the columns
date <- as.Date(c("2020-03-22", "2020-03-23", "2020-03-24", "2020-03-25", '2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-15", "2020-04-16", "2020-04-17", "2020-04-18", "2020-04-19", "2020-04-20", "2020-04-21", "2020-04-22", "2020-04-23"))
estimated_infections_no_action <- c(twentyTwoMarch, twentyThreeMarch, twentyFourMarch, twentyFiveMarch,twentySixMarch, twentySevenMarch, twentyEightMarch, twentyNineMarch, thirtyMarch, thirtyOneMarch, oneApril, twoApril, threeApril, fourApril, fiveApril, sixApril, sevenApril, eightApril, nineApril, tenApril, elevenApril, twelveApril, thirteenApril, fourteenApril, fifteenApril, sixteenApril, seventeenApril, eighteenApril, nineteenApril, twentyApril, twentyoneApril, twentytwoApril, twentythreeApril)
# create the data frame
predicted_infections <- data.frame(date, estimated_infections_no_action)
# tidy the estimated_infections column
#predicted_infections <- predicted_infections %>% mutate(estimated_infections=format(estimated_infections, big.mark = ","))
# inspect the data frame
predicted_infections
# create a function that uses a growth rate of 1.125 - half of the 25%. This is the estimate for the not-yet-lockdown that existed up to 23rd March. So, the estimate assumes that the social distancing measures reduced the infection rate by a half.
half_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.125
return(predicted_value)
}
# create a function that uses a growth rate of 1.0625 - quarter of the 25%. This is the estimated impact of the lockdown implemented by the UK government on 23rd March (but since the lockdown was announced in the evening, and it would take a full day for its effects to be felt in statistics, I will assume that its effects began on 25th March).
lockdown_predictor <- function(previous_value) {
predicted_value <- previous_value * 1.0625
return(predicted_value)
}
# create predictions for each date
twentyTwoMarch <- 1.125 * 360500
twentyThreeMarch <- half_predictor(twentyTwoMarch)
twentyFourMarch <- half_predictor(twentyThreeMarch)
twentyFiveMarch <- lockdown_predictor(twentyFourMarch)
twentySixMarch <- lockdown_predictor(twentyFiveMarch)
twentySevenMarch <- lockdown_predictor(twentySixMarch)
twentyEightMarch <- lockdown_predictor(twentySevenMarch)
twentyNineMarch <- lockdown_predictor(twentyEightMarch)
thirtyMarch <- lockdown_predictor(twentyNineMarch)
thirtyOneMarch <- lockdown_predictor(thirtyMarch)
oneApril <- lockdown_predictor(thirtyOneMarch)
twoApril <- lockdown_predictor(oneApril)
threeApril <- lockdown_predictor(twoApril)
fourApril <- lockdown_predictor(threeApril)
fiveApril <- lockdown_predictor(fourApril)
sixApril <- lockdown_predictor(fiveApril)
sevenApril <- lockdown_predictor(sixApril)
eightApril <- lockdown_predictor(sevenApril)
nineApril <- lockdown_predictor(eightApril)
tenApril <- lockdown_predictor(nineApril)
elevenApril <- lockdown_predictor(tenApril)
twelveApril <- lockdown_predictor(elevenApril)
thirteen_April <- lockdown_predictor(twelveApril)
fourteen_April <- lockdown_predictor(thirteen_April)
fifteen_April <- lockdown_predictor(fourteen_April)
sixteen_April <- lockdown_predictor(fifteen_April)
seventeen_April <- lockdown_predictor(sixteen_April)
eighteen_April <- lockdown_predictor(seventeen_April)
nineteen_April <- lockdown_predictor(eighteen_April)
twenty_April <- lockdown_predictor(nineteen_April)
twentyone_April <- lockdown_predictor(twenty_April)
twentytwo_April <- lockdown_predictor(twentyone_April)
twentythree_April <- lockdown_predictor(twentytwo_April)
# create vectors to populate the columns
date <- as.Date(c("2020-03-22", "2020-03-23", "2020-03-24", "2020-03-25", '2020-03-26','2020-03-27', '2020-03-28', '2020-03-29', '2020-03-30', '2020-03-31', "2020-04-01", "2020-04-02", "2020-04-03", "2020-04-04", "2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-15", "2020-04-16", "2020-04-17", "2020-04-18", "2020-04-19", "2020-04-20", "2020-04-21", "2020-04-22", "2020-04-23"))
estimated_infections_lockdown <- c(twentyTwoMarch, twentyThreeMarch, twentyFourMarch, twentyFiveMarch,twentySixMarch, twentySevenMarch, twentyEightMarch, twentyNineMarch, thirtyMarch, thirtyOneMarch, oneApril, twoApril, threeApril, fourApril, fiveApril, sixApril, sevenApril, eightApril, nineApril, tenApril, elevenApril, twelveApril, thirteen_April, fourteen_April, fifteen_April, sixteen_April, seventeen_April, eighteen_April, nineteen_April, twenty_April, twentyone_April, twentytwo_April, twentythree_April)
# create the data frame
lockdown_infection_rates <- data.frame(date, estimated_infections_lockdown)
# tidy the estimated_infections column
#lockdown_infection_rates <- lockdown_infection_rates %>% mutate(estimated_infections_lockdown=format(estimated_infections_lockdown, scientific = FALSE))
# inspect the data frame
lockdown_infection_rates
compared_infections <- predicted_infections %>% bind_cols(estimated_infections_lockdown=lockdown_infection_rates$estimated_infections_lockdown)
compared_infections
#compared_infections <- compared_infections %>% mutate(estimated_infections=format(estimated_infections, big.mark = ","))
#compared_infections <- compared_infections %>% mutate(estimated_infections_lockdown=as.numeric(estimated_infections_lockdown))
#compared_infections <- compared_infections %>% mutate(estimated_infections_lockdown=format(estimated_infections_lockdown, big.mark = ","))
compared_infections
# first, put the columns back to numeric format
#compared_infections_and_deaths <- compared_infections %>% mutate(estimated_infections=as.numeric(estimated_infections))
compared_infections_and_deaths <- compared_infections %>% mutate(estimated_deaths_no_action=0.01*estimated_infections_no_action)
compared_infections_and_deaths <- compared_infections_and_deaths %>% mutate(estimated_deaths_lockdown=0.01*estimated_infections_lockdown)
compared_infections_and_deaths
compared_infections_and_deaths_dates <- compared_infections_and_deaths %>% mutate(death_date_14_days=as.Date(date + days(14)))
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(death_date_7_days=as.Date(date + days(7)))
# add a column to review the results on a daily basis.
assess <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment = assess)
compared_infections_and_deaths_dates <- compared_infections_and_deaths %>% mutate(death_date_14_days=as.Date(date + days(14)))
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(death_date_7_days=as.Date(date + days(7)))
# add a column to review the results on a daily basis.
assess <- c("NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA", "NA")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment = assess)
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates %>% mutate(fourteen_day_assessment=replace(fourteen_day_assessment, death_date_14_days==c("2020-04-05", "2020-04-06", "2020-04-07", "2020-04-08", "2020-04-09", "2020-04-10", "2020-04-11", "2020-04-12", "2020-04-13", "2020-04-14", "2020-04-15", "2020-04-16", "2020-04-17", "2020-04-18", "2020-04-19", "2020-04-20"), c("As of 2020-04-05, the actual death toll was 4313", "As of 2020-04-06, the actual death toll was 4934", "As of 2020-04-07, the actual death toll was 5373", "As of 2020-04-08, the actual death toll was 6159", "As of 2020-04-09, the actual death toll was 7097", "As of 2020-04-10, the actual death toll was 7978","As of 2020-04-11, the actual death toll was 8958","As of 2020-04-12, the actual death toll was 9875", "As of 2020-04-13, the actual death toll was 10612", "As of 2020-04-14, the actual death toll was 11329", "As of 2020-04-15, the actual death toll was 12107", "As of 2020-04-16, the actual death toll was 12868", "As of 2020-04-17, the actual death toll was 13729", "As of 2020-04-18, the actual death toll was 14576", "As of 2020-04-19, the actual death toll was 15464", "As of 2020-04-20, the actual death toll was 16060")))
#reorder the columns
new_order <- c("date", "estimated_infections_no_action", "estimated_infections_lockdown", "estimated_deaths_no_action",  "estimated_deaths_lockdown", "death_date_14_days", "fourteen_day_assessment", "death_date_7_days")
compared_infections_and_deaths_dates <- compared_infections_and_deaths_dates[, new_order]
#names <- colnames(compared_infections_and_deaths_dates)
#names
compared_infections_and_deaths_dates
library(ggplot2)
library(scales)
infectionsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=date)) + geom_line(aes(y=estimated_infections_no_action), col = "steelblue") + geom_line(aes(y=estimated_infections_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-13"), y = 50000000, label="No action")) + geom_text(x=as.Date("2020-04-13"), y = 5000000, label="Lockdown") + labs(title="Predicted infections (lockdown versus no action)", x='Date', y='Predicted Infections') + theme_classic()
infectionsComparisonLine
deathsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=death_date_7_days)) + geom_line(aes(y=estimated_deaths_no_action), col = "steelblue") + geom_line(aes(y=estimated_deaths_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-21"), y = 500000, label="No action")) + geom_text(x=as.Date("2020-04-21"), y = 50000, label="Lockdown") + labs(title="Predicted Deaths (lockdown versus no action)", subtitle="estimates that it takes 3 weeks for measures to impact deaths", x='Date', y='Predicted Deaths') + theme_classic()
deathsComparisonLine
deathsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=death_date_14_days)) + geom_line(aes(y=estimated_deaths_no_action), col = "steelblue") + geom_line(aes(y=estimated_deaths_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-28"), y = 500000, label="No action")) + geom_text(x=as.Date("2020-04-28"), y = 50000, label="Lockdown") + labs(title="Predicted Deaths (lockdown versus no action)", subtitle="estimates that it takes 2 weeks for measures to impact deaths", x='Date', y='Predicted Deaths') + theme_classic()
deathsComparisonLine
library(readr)
library(dplyr)
figures <- read.csv('uk_daily_tests.csv')
figures
figures <- figures %>% mutate(`Total Tests`=`Pillar.1.Tests` + `Pillar.2.Tests` + `Pillar.4.Tests`)
figures
p1People <- 9393/2
p1People
p1Tests <- 12081/2
p1Tests
p2People <- 2486/2
p2People
p2Tests <- 2486/2
p4Tests <- 415/2
p4Tests
library(ggplot2)
library(ggthemes)
library(plotly)
totalTestBar <- ggplot(figures, aes(x=Date, y=`Total Tests`)) + geom_bar(stat='identity', fill='#87189D') + ggtitle('Number of Tests Conducted per Day (all Pillars)') + theme_clean()
totalTestBar
# make the plot interactive using plotly
ggplotly(totalTestBar)
lm([target variable] ~ [predictor variables], data = [data source])
library(readr)
library(ggplot2)
library(plotly)
library(dplyr)
df <- read.csv('covid_19_deaths.csv')
head(df)
df <- df %>% mutate(`daily death toll`=c(UK.Deaths[1], diff(UK.Deaths)))
head(df)
tail(df)
dailyPlot <- ggplot(df, aes(x=Date, y=`daily death toll`)) + geom_bar(stat = 'identity', fill='brown', alpha=0.7) + ggtitle('Daily UK Death Toll in Hospitals')
dailyPlot <- dailyPlot + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplotly(dailyPlot)
df2 <- df %>% mutate(Rate=100*(`daily death toll`/lag(UK.Deaths)))
tail(df2)
percentPlot <- ggplot(df2, aes(x=Date, y=Rate)) + geom_bar(stat = 'identity', fill='blue', alpha=0.7) + ggtitle('Daily UK Growth Rate (Hospitals)') + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplotly(percentPlot)
library(stringr)
library(dplyr)
library(readr)
swedish_population <- 10322000
sweden <- read.csv("covid_19_sweden_stats.csv")
sweden <- sweden %>% mutate(sweden_death_rate=format(100*(Deaths/swedish_population), scientific=FALSE))
sweden
uk_population <- 66867000
uk <- read_csv("covid_19_deaths.csv")
uk <- uk %>% select(-`Global Deaths`)
uk <- uk %>% rename(deaths='UK Deaths')
uk <- uk %>% mutate(uk_death_rate=format(100*(deaths/uk_population), scientific=FALSE))
uk
uk_sweden <- sweden %>% bind_cols(uk)
uk_sweden <- uk_sweden %>% select(Date, sweden_death_rate, uk_death_rate)
uk_sweden <- uk_sweden %>% mutate(sweden_death_rate=as.numeric(sweden_death_rate), uk_death_rate=as.numeric(uk_death_rate))
uk_sweden <- uk_sweden %>% mutate(comparison=uk_death_rate/sweden_death_rate)
uk_sweden <- uk_sweden %>% mutate(sweden_death_rate=format(sweden_death_rate, scientific=FALSE), uk_death_rate=format(uk_death_rate, scientific=FALSE))
uk_sweden
#calculate the average death rates (mean and median - the values are too specific for the mode to be useful
#mean
swedish_mean_death_rate <- uk_sweden %>% summarize(mean(as.numeric(sweden_death_rate)))
str_glue("Swedish mean death rate: {swedish_mean_death_rate}")
uk_mean_death_rate <- uk_sweden %>% summarize(mean(as.numeric(uk_death_rate)))
str_glue("UK mean death rate: {uk_mean_death_rate}")
mean_comparison <- uk_mean_death_rate/swedish_mean_death_rate
str_glue("When comparing mean death rates, the UK death rate is {mean_comparison} times the Swedish death rate.")
#median
swedish_median_death_rate <- uk_sweden %>% summarize(median(as.numeric(sweden_death_rate)))
uk_median_death_rate <- uk_sweden %>% summarize(median(as.numeric(uk_death_rate)))
median_comparison <- uk_median_death_rate/swedish_median_death_rate
swedish_median_death_rate <- format(swedish_median_death_rate, scientific=FALSE)
uk_median_death_rate <- format(uk_median_death_rate, scientific=FALSE)
str_glue("Swedish median death rate: {swedish_median_death_rate}")
str_glue("UK median death rate: {uk_median_death_rate}")
str_glue("When comparing median death rates, the UK death rate is {median_comparison} times the Swedish death rate.")
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
interactive <- interactive %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
install.packages("gapminder")
install.packages("gapminder")
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
fig <- interactive %>%
plot_ly(
x = ~x,
y = ~y,
frame = ~f,
type = 'scatter',
mode = 'markers',
showlegend = F
)
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=estimated_infections_lockdown, y=estimated_deaths_lockdown, frame = ~Date, type = 'scatter', mode = 'markers')
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~Date, type = 'scatter', mode = 'markers')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
#fig <- fig %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
fig
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~date, type = 'scatter', mode = 'markers')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
#fig <- fig %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
fig
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~date, type = 'scatter')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
#fig <- fig %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
fig
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~date, type = 'scatter')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
fig2 <- compared_infections_and_deaths_dates %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~date, type = 'scatter')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
fig2 <- fig %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
fig2
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~date, type = 'scatter', mode='markers')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
fig2 <- fig %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
fig2
library(plotly)
casesDeaths <- ggplot(compared_infections_and_deaths_dates, aes(x=estimated_infections_lockdown, y=estimated_deaths_lockdown)) + geom_point()
casesDeaths
interactive <- ggplotly(casesDeaths)
# fig <- interactive %>%
#   plot_ly(
#     x = ~x,
#     y = ~y,
#     frame = ~f,
#     type = 'scatter',
#     mode = 'markers',
#     showlegend = F
#   )
fig <- compared_infections_and_deaths_dates %>% plot_ly(x=~estimated_infections_lockdown, y=~estimated_deaths_lockdown, frame = ~date, type = 'scatter', mode='markers')
# fig <- fig %>% layout(
#     xaxis = list(
#       type = "log"
#     )
#   )
fig2 <- fig %>% animation_slider(currentvalue=list(prefix = "Date", font = list(color='red')))
fig2
library(ggplot2)
library(scales)
infectionsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=date)) + geom_line(aes(y=estimated_infections_no_action), col = "steelblue") + geom_line(aes(y=estimated_infections_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-13"), y = 50000000, label="No action")) + geom_text(x=as.Date("2020-04-13"), y = 5000000, label="Lockdown") + labs(title="Predicted infections (lockdown versus no action)", x='Date', y='Predicted Infections') + theme_classic()
infectionsComparisonLine
deathsComparisonLine <- ggplot(compared_infections_and_deaths_dates, aes(x=death_date_7_days)) + geom_line(aes(y=estimated_deaths_no_action), col = "steelblue") + geom_line(aes(y=estimated_deaths_lockdown), col="darkred") + scale_y_continuous(labels=label_comma()) + geom_text(aes(x=as.Date("2020-04-21"), y = 500000, label="No action")) + geom_text(x=as.Date("2020-04-21"), y = 50000, label="Lockdown") + labs(title="Predicted Deaths (lockdown versus no action)", subtitle="estimates that it takes 3 weeks for measures to impact deaths", x='Date', y='Predicted Deaths') + theme_classic()
deathsComparisonLine
